<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hna.hka.archive.management.system.dao.SysRobotMapper">
    <resultMap id="BaseResultMap" type="com.hna.hka.archive.management.system.model.SysRobot">
        <id column="ROBOT_ID" property="robotId" jdbcType="BIGINT"/>
        <result column="ROBOT_CODE_SIM" property="robotCodeSim" jdbcType="VARCHAR"/>
        <result column="SCENIC_SPOT_ID" property="scenicSpotId" jdbcType="BIGINT"/>
        <result column="ROBOT_CODE_CID" property="robotCodeCid" jdbcType="VARCHAR"/>
        <result column="ROBOT_CODE" property="robotCode" jdbcType="VARCHAR"/>
        <result column="ROBOT_RUN_STATE" property="robotRunState" jdbcType="VARCHAR"/>
        <result column="ROBOT_POWER_STATE" property="robotPowerState" jdbcType="VARCHAR"/>
        <result column="ROBOT_FAULT_STATE" property="robotFaultState" jdbcType="VARCHAR"/>
        <result column="ROBOT_TYPE" property="robotType" jdbcType="VARCHAR"/>
        <result column="ROBOT_POLLING_TYPE" property="robotPollingType" jdbcType="VARCHAR"/>
        <result column="ROBOT_GPS_SMALL_APP" property="robotGpsSmallApp" jdbcType="VARCHAR"/>
        <result column="ROBOT_GPS_BAI_DU" property="robotGpsBaiDu" jdbcType="VARCHAR"/>
        <result column="ROBOT_GPS_GPGGA" property="robotGpsGpgga" jdbcType="VARCHAR"/>
        <result column="ROBOT_ADMIN_LOCKING" property="robotAdminLocking" jdbcType="VARCHAR"/>
        <result column="PUSH_STATUS" property="pushStatus" jdbcType="VARCHAR"/>
        <result column="UPDATE_PUSH_DATE" property="updatePushDate" jdbcType="VARCHAR"/>
        <result column="ROBOT_OPERATION_STATUS" property="robotOperationStatus" jdbcType="VARCHAR"/>
        <result column="CREATE_DATE" property="createDate" jdbcType="VARCHAR"/>
        <result column="UPDATE_DATE" property="updateDate" jdbcType="VARCHAR"/>
        <result column="ROBOT_REMARKS" property="robotRemarks" jdbcType="VARCHAR"/>
        <result column="CLIENT_VERSION" property="clientVersion" jdbcType="VARCHAR"/>
        <result column="ROBOT_BATCH_NUMBER" property="robotBatchNumber" jdbcType="VARCHAR"/>
        <result column="ROBOT_MODEL" property="robotModel" jdbcType="VARCHAR"/>
        <result column="NEW_ROBOT_CODE_CID" property="newRobotCodeCid" jdbcType="VARCHAR"/>
        <result column="ROBOT_APP_TYPE" property="robotAppType" jdbcType="VARCHAR"/>
        <result column="ROBOT_BLUETOOTH" property="robotBluetooth" jdbcType="VARCHAR"/>
        <result column="AUTO_UPDATE_STATE" property="autoUpdateState" jdbcType="VARCHAR"/>
    </resultMap>
    <resultMap id="BaseResultExcelMap" type="com.hna.hka.archive.management.system.model.SysRobotExcel">
    </resultMap>
    <resultMap id="BaseResultGPSMap" type="com.hna.hka.archive.management.system.model.SysRobotGPS">
    </resultMap>
    <resultMap id="BaseResultAssetsRobotExcel"
               type="com.hna.hka.archive.management.assetsSystem.model.SysAssetsRobotExcel">
    </resultMap>
    <resultMap id="BaseResultAppRobot" type="com.hna.hka.archive.management.appSystem.model.SysAppRobot">
    </resultMap>
    <resultMap id="BaseResultAppRobotOperationTime"
               type="com.hna.hka.archive.management.appSystem.model.SysAppRobotOperationTime">
    </resultMap>
    <resultMap id="operateState" type="com.hna.hka.archive.management.assetsSystem.model.OperateState">
    </resultMap>
    <sql id="Base_Column_List">
        ROBOT_ID
        , ROBOT_CODE_SIM, SCENIC_SPOT_ID, ROBOT_CODE_CID,NEW_ROBOT_CODE_CID,ROBOT_APP_TYPE, ROBOT_CODE, ROBOT_RUN_STATE,
    ROBOT_POWER_STATE, ROBOT_FAULT_STATE, ROBOT_TYPE, ROBOT_POLLING_TYPE, ROBOT_GPS_SMALL_APP,
    ROBOT_GPS_BAI_DU, ROBOT_GPS_GPGGA, ROBOT_ADMIN_LOCKING, PUSH_STATUS, UPDATE_PUSH_DATE,
    ROBOT_OPERATION_STATUS, CREATE_DATE, UPDATE_DATE, ROBOT_REMARKS, CLIENT_VERSION,
    ROBOT_BATCH_NUMBER, ROBOT_MODEL,ROBOT_BLUETOOTH
    </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from SYS_ROBOT
        where ROBOT_ID = #{robotId,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from SYS_ROBOT
        where ROBOT_ID = #{robotId,jdbcType=BIGINT}
    </delete>
    <insert id="insert" parameterType="com.hna.hka.archive.management.system.model.SysRobot">
        insert into SYS_ROBOT (ROBOT_ID, ROBOT_CODE_SIM, SCENIC_SPOT_ID,
                               ROBOT_CODE_CID, ROBOT_CODE, ROBOT_RUN_STATE,
                               ROBOT_POWER_STATE, ROBOT_FAULT_STATE, ROBOT_TYPE,
                               ROBOT_POLLING_TYPE, ROBOT_GPS_SMALL_APP, ROBOT_GPS_BAI_DU,
                               ROBOT_GPS_GPGGA, ROBOT_ADMIN_LOCKING, PUSH_STATUS,
                               UPDATE_PUSH_DATE, ROBOT_OPERATION_STATUS, CREATE_DATE,
                               UPDATE_DATE, ROBOT_REMARKS, CLIENT_VERSION, ROBOT_BATCH_NUMBER, ROBOT_MODEL)
        values (#{robotId,jdbcType=BIGINT}, #{robotCodeSim,jdbcType=VARCHAR}, #{scenicSpotId,jdbcType=BIGINT},
                #{robotCodeCid,jdbcType=VARCHAR}, #{robotCode,jdbcType=VARCHAR}, #{robotRunState,jdbcType=VARCHAR},
                #{robotPowerState,jdbcType=VARCHAR}, #{robotFaultState,jdbcType=VARCHAR}, #{robotType,jdbcType=VARCHAR},
                #{robotPollingType,jdbcType=VARCHAR}, #{robotGpsSmallApp,jdbcType=VARCHAR},
                #{robotGpsBaiDu,jdbcType=VARCHAR},
                #{robotGpsGpgga,jdbcType=VARCHAR}, #{robotAdminLocking,jdbcType=VARCHAR},
                #{pushStatus,jdbcType=VARCHAR},
                #{updatePushDate,jdbcType=VARCHAR}, #{robotOperationStatus,jdbcType=VARCHAR},
                #{createDate,jdbcType=VARCHAR},
                #{updateDate,jdbcType=VARCHAR}, #{robotRemarks,jdbcType=VARCHAR}, #{clientVersion,jdbcType=VARCHAR},
                #{robotBatchNumber,jdbcType=VARCHAR}, #{robotModel,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.hna.hka.archive.management.system.model.SysRobot">
        insert into SYS_ROBOT
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="robotId != null">
                ROBOT_ID,
            </if>
            <if test="robotCodeSim != null">
                ROBOT_CODE_SIM,
            </if>
            <if test="scenicSpotId != null">
                SCENIC_SPOT_ID,
            </if>
            <if test="robotCodeCid != null">
                ROBOT_CODE_CID,
            </if>
            <if test="robotCode != null">
                ROBOT_CODE,
            </if>
            <if test="robotRunState != null">
                ROBOT_RUN_STATE,
            </if>
            <if test="robotPowerState != null">
                ROBOT_POWER_STATE,
            </if>
            <if test="robotFaultState != null">
                ROBOT_FAULT_STATE,
            </if>
            <if test="robotType != null">
                ROBOT_TYPE,
            </if>
            <if test="robotPollingType != null">
                ROBOT_POLLING_TYPE,
            </if>
            <if test="robotGpsSmallApp != null">
                ROBOT_GPS_SMALL_APP,
            </if>
            <if test="robotGpsBaiDu != null">
                ROBOT_GPS_BAI_DU,
            </if>
            <if test="robotGpsGpgga != null">
                ROBOT_GPS_GPGGA,
            </if>
            <if test="robotAdminLocking != null">
                ROBOT_ADMIN_LOCKING,
            </if>
            <if test="pushStatus != null">
                PUSH_STATUS,
            </if>
            <if test="updatePushDate != null">
                UPDATE_PUSH_DATE,
            </if>
            <if test="robotOperationStatus != null">
                ROBOT_OPERATION_STATUS,
            </if>
            <if test="createDate != null">
                CREATE_DATE,
            </if>
            <if test="updateDate != null">
                UPDATE_DATE,
            </if>
            <if test="robotRemarks != null">
                ROBOT_REMARKS,
            </if>
            <if test="clientVersion != null">
                CLIENT_VERSION,
            </if>
            <if test="robotBatchNumber != null">
                ROBOT_BATCH_NUMBER,
            </if>
            <if test="robotModel != null">
                ROBOT_MODEL,
            </if>
            <if test="robotBluetooth  != null">
                ROBOT_BLUETOOTH,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="robotId != null">
                #{robotId,jdbcType=BIGINT},
            </if>
            <if test="robotCodeSim != null">
                #{robotCodeSim,jdbcType=VARCHAR},
            </if>
            <if test="scenicSpotId != null">
                #{scenicSpotId,jdbcType=BIGINT},
            </if>
            <if test="robotCodeCid != null">
                #{robotCodeCid,jdbcType=VARCHAR},
            </if>
            <if test="robotCode != null">
                #{robotCode,jdbcType=VARCHAR},
            </if>
            <if test="robotRunState != null">
                #{robotRunState,jdbcType=VARCHAR},
            </if>
            <if test="robotPowerState != null">
                #{robotPowerState,jdbcType=VARCHAR},
            </if>
            <if test="robotFaultState != null">
                #{robotFaultState,jdbcType=VARCHAR},
            </if>
            <if test="robotType != null">
                #{robotType,jdbcType=VARCHAR},
            </if>
            <if test="robotPollingType != null">
                #{robotPollingType,jdbcType=VARCHAR},
            </if>
            <if test="robotGpsSmallApp != null">
                #{robotGpsSmallApp,jdbcType=VARCHAR},
            </if>
            <if test="robotGpsBaiDu != null">
                #{robotGpsBaiDu,jdbcType=VARCHAR},
            </if>
            <if test="robotGpsGpgga != null">
                #{robotGpsGpgga,jdbcType=VARCHAR},
            </if>
            <if test="robotAdminLocking != null">
                #{robotAdminLocking,jdbcType=VARCHAR},
            </if>
            <if test="pushStatus != null">
                #{pushStatus,jdbcType=VARCHAR},
            </if>
            <if test="updatePushDate != null">
                #{updatePushDate,jdbcType=VARCHAR},
            </if>
            <if test="robotOperationStatus != null">
                #{robotOperationStatus,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=VARCHAR},
            </if>
            <if test="updateDate != null">
                #{updateDate,jdbcType=VARCHAR},
            </if>
            <if test="robotRemarks != null">
                #{robotRemarks,jdbcType=VARCHAR},
            </if>
            <if test="clientVersion != null">
                #{clientVersion,jdbcType=VARCHAR},
            </if>
            <if test="robotBatchNumber != null">
                #{robotBatchNumber,jdbcType=VARCHAR},
            </if>
            <if test="robotModel != null">
                #{robotModel,jdbcType=VARCHAR},
            </if>
            <if test="robotBluetooth != null">
                #{robotBluetooth,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.hna.hka.archive.management.system.model.SysRobot">
        update SYS_ROBOT
        <set>
            <if test="robotCodeSim != null">
                ROBOT_CODE_SIM = #{robotCodeSim,jdbcType=VARCHAR},
            </if>
            <if test="scenicSpotId != null">
                SCENIC_SPOT_ID = #{scenicSpotId,jdbcType=BIGINT},
            </if>
            <if test="robotCodeCid != null">
                ROBOT_CODE_CID = #{robotCodeCid,jdbcType=VARCHAR},
            </if>
            <if test="robotCode != null">
                ROBOT_CODE = #{robotCode,jdbcType=VARCHAR},
            </if>
            <if test="robotRunState != null">
                ROBOT_RUN_STATE = #{robotRunState,jdbcType=VARCHAR},
            </if>
            <if test="robotPowerState != null">
                ROBOT_POWER_STATE = #{robotPowerState,jdbcType=VARCHAR},
            </if>
            <if test="robotFaultState != null">
                ROBOT_FAULT_STATE = #{robotFaultState,jdbcType=VARCHAR},
            </if>
            <if test="robotType != null">
                ROBOT_TYPE = #{robotType,jdbcType=VARCHAR},
            </if>
            <if test="robotPollingType != null">
                ROBOT_POLLING_TYPE = #{robotPollingType,jdbcType=VARCHAR},
            </if>
            <if test="robotGpsSmallApp != null">
                ROBOT_GPS_SMALL_APP = #{robotGpsSmallApp,jdbcType=VARCHAR},
            </if>
            <if test="robotGpsBaiDu != null">
                ROBOT_GPS_BAI_DU = #{robotGpsBaiDu,jdbcType=VARCHAR},
            </if>
            <if test="robotGpsGpgga != null">
                ROBOT_GPS_GPGGA = #{robotGpsGpgga,jdbcType=VARCHAR},
            </if>
            <if test="robotAdminLocking != null">
                ROBOT_ADMIN_LOCKING = #{robotAdminLocking,jdbcType=VARCHAR},
            </if>
            <if test="pushStatus != null">
                PUSH_STATUS = #{pushStatus,jdbcType=VARCHAR},
            </if>
            <if test="updatePushDate != null">
                UPDATE_PUSH_DATE = #{updatePushDate,jdbcType=VARCHAR},
            </if>
            <if test="robotOperationStatus != null">
                ROBOT_OPERATION_STATUS = #{robotOperationStatus,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null">
                CREATE_DATE = #{createDate,jdbcType=VARCHAR},
            </if>
            <if test="updateDate != null">
                UPDATE_DATE = #{updateDate,jdbcType=VARCHAR},
            </if>
            <if test="robotRemarks != null">
                ROBOT_REMARKS = #{robotRemarks,jdbcType=VARCHAR},
            </if>
            <if test="clientVersion != null">
                CLIENT_VERSION = #{clientVersion,jdbcType=VARCHAR},
            </if>
            <if test="robotBatchNumber != null">
                ROBOT_BATCH_NUMBER = #{robotBatchNumber,jdbcType=VARCHAR},
            </if>
            <if test="robotModel != null">
                ROBOT_MODEL = #{robotModel,jdbcType=VARCHAR},
            </if>
            <if test="equipmentStatus != null">
                EQUIPMENT_STATUS = #{equipmentStatus,jdbcType=VARCHAR},
            </if>
            <if test="robotBluetooth != null">
                ROBOT_BLUETOOTH = #{robotBluetooth,jdbcType=VARCHAR},
            </if>
        </set>
        where ROBOT_ID = #{robotId,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.hna.hka.archive.management.system.model.SysRobot">
        update SYS_ROBOT
        set ROBOT_CODE_SIM         = #{robotCodeSim,jdbcType=VARCHAR},
            SCENIC_SPOT_ID         = #{scenicSpotId,jdbcType=BIGINT},
            ROBOT_CODE_CID         = #{robotCodeCid,jdbcType=VARCHAR},
            ROBOT_CODE             = #{robotCode,jdbcType=VARCHAR},
            ROBOT_RUN_STATE        = #{robotRunState,jdbcType=VARCHAR},
            ROBOT_POWER_STATE      = #{robotPowerState,jdbcType=VARCHAR},
            ROBOT_FAULT_STATE      = #{robotFaultState,jdbcType=VARCHAR},
            ROBOT_TYPE             = #{robotType,jdbcType=VARCHAR},
            ROBOT_POLLING_TYPE     = #{robotPollingType,jdbcType=VARCHAR},
            ROBOT_GPS_SMALL_APP    = #{robotGpsSmallApp,jdbcType=VARCHAR},
            ROBOT_GPS_BAI_DU       = #{robotGpsBaiDu,jdbcType=VARCHAR},
            ROBOT_GPS_GPGGA        = #{robotGpsGpgga,jdbcType=VARCHAR},
            ROBOT_ADMIN_LOCKING    = #{robotAdminLocking,jdbcType=VARCHAR},
            PUSH_STATUS            = #{pushStatus,jdbcType=VARCHAR},
            UPDATE_PUSH_DATE       = #{updatePushDate,jdbcType=VARCHAR},
            ROBOT_OPERATION_STATUS = #{robotOperationStatus,jdbcType=VARCHAR},
            CREATE_DATE            = #{createDate,jdbcType=VARCHAR},
            UPDATE_DATE            = #{updateDate,jdbcType=VARCHAR},
            ROBOT_REMARKS          = #{robotRemarks,jdbcType=VARCHAR},
            CLIENT_VERSION         = #{clientVersion,jdbcType=VARCHAR},
            ROBOT_BATCH_NUMBER     = #{robotBatchNumber,jdbcType=VARCHAR},
            ROBOT_MODEL            = #{robotModel,jdbcType=VARCHAR},
            ROBOT_BLUETOOTH        = #{robotBluetooth,jdbcType=VARCHAR}
        where ROBOT_ID = #{robotId,jdbcType=BIGINT}
    </update>
    <select id="getRobotList" resultMap="BaseResultMap" parameterType="java.util.Map">
        SELECT
        A.*,
        B.SCENIC_SPOT_NAME AS scenicSpotName,
        C.ROBOT_VERSION_NUMBER AS robotVersionNumber
        FROM
        SYS_ROBOT A
        LEFT JOIN SYS_USERS_ROLE_SPOT D ON D.SCENIC_SPOT_ID = A.SCENIC_SPOT_ID
        LEFT JOIN SYS_SCENIC_SPOT B ON A.SCENIC_SPOT_ID = B.SCENIC_SPOT_ID
        LEFT JOIN SYS_ROBOT_VERSION C ON A.ROBOT_ID = C.ROBOT_ID
        <where>
            <if test="userId != null and userId != ''">
                AND D.USER_ID = #{userId}
            </if>
            <if test="robotCode != null and robotCode != ''">
                AND A.ROBOT_CODE LIKE CONCAT('%',#{robotCode},'%')
            </if>
            <if test="scenicSpotId != null and scenicSpotId != ''">
                AND A.SCENIC_SPOT_ID = #{scenicSpotId}
            </if>
            <if test="robotCodeSim != null and robotCodeSim != ''">
                AND A.ROBOT_CODE_SIM LIKE CONCAT('%',#{robotCodeSim},'%')
            </if>
            <if test="robotRunState != null and robotRunState != ''">
                AND A.ROBOT_RUN_STATE = #{robotRunState}
            </if>
            <if test="clientVersion != null and clientVersion != ''">
                AND A.CLIENT_VERSION LIKE CONCAT('%',#{clientVersion},'%')
            </if>
            <if test="type != null and type != ''">
                AND B.ROBOT_WAKEUP_WORDS IN
                <foreach collection="type.split(',')" separator="," open="(" close=")" item="stat">
                    #{stat}
                </foreach>

            </if>
        </where>
        ORDER BY A.ROBOT_CODE DESC
    </select>
    <select id="getRobotCodeBy" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from SYS_ROBOT
        where ROBOT_CODE = #{robotCode}
    </select>
    <select id="getRobotSimById" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from SYS_ROBOT
        where ROBOT_CODE_SIM = #{robotCodeSim}
    </select>
    <select id="getRobotExcel" resultMap="BaseResultExcelMap" parameterType="java.util.Map">
        SELECT
        A.ROBOT_CODE AS robotCode,
        A.ROBOT_CODE_SIM AS robotCodeSim,
        A.ROBOT_BLUETOOTH AS robotBluetooth,
        A.CREATE_DATE AS createDate,
        A.ROBOT_REMARKS AS robotRemarks,
        A.ROBOT_RUN_STATE as robotRunState,
        A.ROBOT_BATCH_NUMBER as robotBatchNumber,
        B.SCENIC_SPOT_NAME AS scenicSpotName,
        C.ROBOT_VERSION_NUMBER AS robotVersionNumber,
        A.CLIENT_VERSION AS clientVersion
        FROM
        SYS_ROBOT A
        LEFT JOIN SYS_USERS_ROLE_SPOT D ON D.SCENIC_SPOT_ID = A.SCENIC_SPOT_ID
        LEFT JOIN SYS_SCENIC_SPOT B ON A.SCENIC_SPOT_ID = B.SCENIC_SPOT_ID
        LEFT JOIN SYS_ROBOT_VERSION C ON A.ROBOT_ID = C.ROBOT_ID
        <where>
            <if test="userId != null and userId != ''">
                AND D.USER_ID = #{userId}
            </if>
            <if test="robotCode != null and robotCode != ''">
                AND A.ROBOT_CODE LIKE CONCAT('%',#{robotCode},'%')
            </if>
            <if test="scenicSpotId != null and scenicSpotId != ''">
                AND A.SCENIC_SPOT_ID = #{scenicSpotId}
            </if>
            <if test="robotRunState != null and robotRunState != ''">
                AND A.ROBOT_RUN_STATE = #{robotRunState}
            </if>
            <if test="type != null and type != ''">
                AND B.ROBOT_WAKEUP_WORDS IN
                <foreach collection="type.split(',')" separator="," open="(" close=")" item="stat">
                    #{stat}
                </foreach>
            </if>
        </where>
        ORDER BY A.CREATE_DATE DESC
    </select>
    <select id="getRobotListBy" resultMap="BaseResultMap">
        SELECT
        A.*,
        B.SCENIC_SPOT_NAME AS scenicSpotName
        FROM
        SYS_ROBOT A
        LEFT JOIN SYS_SCENIC_SPOT B ON A.SCENIC_SPOT_ID =
        B.SCENIC_SPOT_ID
        WHERE
        A.SCENIC_SPOT_ID = #{scenicSpotId}
        AND A.ROBOT_GPS_BAI_DU IS NOT NULL
        <if test="robotCode != null and robotCode != ''">
            AND A.ROBOT_CODE LIKE CONCAT('%',#{robotCode},'%')
        </if>
    </select>

    <select id="getAppRoleList" resultMap="BaseResultMap" parameterType="java.util.Map">
        SELECT
        A.*,
        B.SCENIC_SPOT_NAME AS scenicSpotName,
        C.ROBOT_VERSION_NUMBER AS robotVersionNumber
        FROM
        SYS_ROBOT A
        LEFT JOIN SYS_SCENIC_SPOT B ON A.SCENIC_SPOT_ID = B.SCENIC_SPOT_ID
        LEFT JOIN SYS_ROBOT_VERSION C ON A.ROBOT_ID = C.ROBOT_ID
        <where>
            <if test="robotCode != null and robotCode != ''">
                AND A.ROBOT_CODE LIKE CONCAT('%',#{robotCode},'%')
            </if>
            <if test="scenicSpotId != null and scenicSpotId != ''">
                AND A.SCENIC_SPOT_ID = #{scenicSpotId}
            </if>
        </where>
        ORDER BY A.CREATE_DATE DESC
    </select>

    <select id="getRobotListByScenicSpotId" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from SYS_ROBOT
        where SCENIC_SPOT_ID = #{scenicSpotId,jdbcType=BIGINT}
    </select>
    <select id="getRobotGpsList" resultMap="BaseResultMap" parameterType="java.util.Map">
        SELECT
        A.ROBOT_CODE,
        A.ROBOT_GPS_BAI_DU,
        A.ROBOT_GPS_GPGGA,
        A.ROBOT_GPS_SMALL_APP,
        A.ROBOT_POWER_STATE,
        A.ROBOT_RUN_STATE,
        A.SCENIC_SPOT_ID,
        B.SCENIC_SPOT_NAME AS scenicSpotName,
        A.CREATE_DATE,
        A.PUSH_STATUS,
        A.ROBOT_ADMIN_LOCKING,
        A.ROBOT_CODE_CID,
        A.ROBOT_CODE_SIM,
        A.ROBOT_FAULT_STATE,
        A.ROBOT_ID,
        A.ROBOT_POLLING_TYPE,
        A.ROBOT_TYPE,
        A.CLIENT_VERSION,
        A.ROBOT_REMARKS
        FROM
        SYS_ROBOT A LEFT JOIN SYS_SCENIC_SPOT B ON A.SCENIC_SPOT_ID = B.SCENIC_SPOT_ID
        <where>
            <if test="scenicSpotId != null and scenicSpotId != ''">
                AND A.SCENIC_SPOT_ID = #{scenicSpotId}
            </if>
            <if test="robotCode != null and robotCode != ''">
                AND A.ROBOT_CODE LIKE CONCAT('%',#{robotCode},'%')
            </if>
        </where>
        <if test="scenicSpotId == '121601250496737'">
            limit 0,150
        </if>
    </select>
    <select id="getRobotGPSByRobotCode" resultMap="BaseResultGPSMap">
        SELECT A.ROBOT_CODE          AS robotCode,
               A.ROBOT_GPS_BAI_DU    AS robotGpsBaiDu,
               A.ROBOT_GPS_GPGGA     AS robotGpsGpgga,
               A.ROBOT_GPS_SMALL_APP AS robotGpsSmallApp,
               A.ROBOT_POWER_STATE   AS robotPowerState,
               A.ROBOT_RUN_STATE     AS robotRunState,
               A.SCENIC_SPOT_ID      AS scenicSpotId,
               B.SCENIC_SPOT_NAME    AS scenicSpotName,
               A.CREATE_DATE         AS createDate,
               A.PUSH_STATUS         AS pushStatus,
               A.ROBOT_ADMIN_LOCKING AS robotAdminLocking,
               A.ROBOT_CODE_CID      AS robotCodeCid,
               A.ROBOT_CODE_SIM      AS robotCodeSim,
               A.ROBOT_FAULT_STATE   AS robotFaultState,
               A.ROBOT_ID            AS robotId,
               A.ROBOT_POLLING_TYPE  AS robotPollingType,
               A.ROBOT_TYPE          AS robotType,
               A.CLIENT_VERSION      AS clientVersion,
               A.ROBOT_REMARKS       AS robotRemarks
        FROM SYS_ROBOT A
                 LEFT JOIN SYS_SCENIC_SPOT B ON A.SCENIC_SPOT_ID = B.SCENIC_SPOT_ID
        WHERE A.ROBOT_CODE = #{robotCode}
    </select>
    <select id="getRobotOperatingInformationList" resultMap="BaseResultMap" parameterType="java.util.Map">
        SELECT
        A.ROBOT_ID,
        A.ROBOT_CODE_SIM,
        A.SCENIC_SPOT_ID,
        A.ROBOT_CODE_CID,
        A.ROBOT_CODE,
        A.ROBOT_RUN_STATE,
        A.ROBOT_POWER_STATE,
        A.ROBOT_FAULT_STATE,
        A.ROBOT_TYPE,
        A.ROBOT_POLLING_TYPE,
        A.ROBOT_GPS_SMALL_APP,
        A.ROBOT_GPS_BAI_DU,
        A.ROBOT_GPS_GPGGA,
        A.ROBOT_ADMIN_LOCKING,
        A.PUSH_STATUS,
        A.UPDATE_PUSH_DATE,
        A.ROBOT_OPERATION_STATUS,
        A.CREATE_DATE,
        A.UPDATE_DATE,
        A.ROBOT_REMARKS,
        A.CLIENT_VERSION,
        A.ROBOT_BATCH_NUMBER,
        A.ROBOT_MODEL,
        B.SCENIC_SPOT_NAME AS scenicSpotName,
        C.ROBOT_VERSION_NUMBER AS robotVersionNumber,
        COALESCE((
        SELECT
        sum( TOTAL_TIME )
        FROM
        SYS_ORDER S
        WHERE
        A.ROBOT_CODE = S.ORDER_ROBOT_CODE
        AND to_days( S.CREATE_DATE ) = to_days(
        now())),0) AS totalTime
        FROM
        SYS_ROBOT A
        LEFT JOIN SYS_USERS_ROLE_SPOT D ON D.SCENIC_SPOT_ID = A.SCENIC_SPOT_ID
        LEFT JOIN SYS_SCENIC_SPOT B ON A.SCENIC_SPOT_ID = B.SCENIC_SPOT_ID
        LEFT JOIN SYS_ROBOT_VERSION C ON A.ROBOT_ID = C.ROBOT_ID
        <where>
            <if test="userId != null and userId != ''">
                AND D.USER_ID = #{userId}
            </if>
            <if test="robotCode != null and robotCode != ''">
                AND A.ROBOT_CODE LIKE CONCAT('%',#{robotCode},'%')
            </if>
            <if test="scenicSpotId != null and scenicSpotId != ''">
                AND A.SCENIC_SPOT_ID = #{scenicSpotId}
            </if>
            <if test="robotCodeSim != null and robotCodeSim != ''">
                AND A.ROBOT_CODE_SIM LIKE CONCAT('%',#{robotCodeSim},'%')
            </if>
        </where>
        ORDER BY A.CREATE_DATE DESC
    </select>
    <select id="getAssetsRobotExcel" resultMap="BaseResultAssetsRobotExcel" parameterType="java.util.Map">
        SELECT
        A.ROBOT_CODE AS robotCode,
        A.ROBOT_RUN_STATE AS robotRunState,
        A.ROBOT_POWER_STATE AS robotPowerState,
        A.ROBOT_FAULT_STATE AS robotFaultState,
        A.CREATE_DATE AS createDate,
        A.CLIENT_VERSION AS clientVersion,
        B.SCENIC_SPOT_NAME AS scenicSpotName,
        C.ROBOT_VERSION_NUMBER AS robotVersionNumber,
        A.ROBOT_MODEL AS robotModel,
        COALESCE((
        SELECT
        sum( TOTAL_TIME )
        FROM
        SYS_ORDER S
        WHERE
        A.ROBOT_CODE = S.ORDER_ROBOT_CODE
        AND to_days( S.CREATE_DATE ) = to_days(
        now())),0) AS totalTime
        FROM
        SYS_ROBOT A
        LEFT JOIN SYS_USERS_ROLE_SPOT D ON D.SCENIC_SPOT_ID = A.SCENIC_SPOT_ID
        LEFT JOIN SYS_SCENIC_SPOT B ON A.SCENIC_SPOT_ID = B.SCENIC_SPOT_ID
        LEFT JOIN SYS_ROBOT_VERSION C ON A.ROBOT_ID = C.ROBOT_ID
        <where>
            <if test="userId != null and userId != ''">
                AND D.USER_ID = #{userId}
            </if>
            <if test="robotCode != null and robotCode != ''">
                AND A.ROBOT_CODE LIKE CONCAT('%',#{robotCode},'%')
            </if>
            <if test="scenicSpotId != null and scenicSpotId != ''">
                AND A.SCENIC_SPOT_ID = #{scenicSpotId}
            </if>
            <if test="robotCodeSim != null and robotCodeSim != ''">
                AND A.ROBOT_CODE_SIM LIKE CONCAT('%',#{robotCodeSim},'%')
            </if>
        </where>
        ORDER BY A.CREATE_DATE DESC
    </select>
    <select id="getAppRobotListVo" resultMap="BaseResultAppRobot" parameterType="java.util.Map">
        SELECT A.ROBOT_CODE          AS robotCode,
               A.ROBOT_GPS_BAI_DU    AS robotGpsBaiDu,
               A.ROBOT_GPS_GPGGA     AS robotGpsGpgga,
               A.ROBOT_GPS_SMALL_APP AS robotGpsSmallApp,
               A.ROBOT_POWER_STATE   AS robotPowerState,
               A.ROBOT_RUN_STATE     AS robotRunState,
               A.SCENIC_SPOT_ID      AS scenicSpotId,
               B.SCENIC_SPOT_NAME    AS scenicSpotName,
               A.CREATE_DATE         AS createDate,
               A.PUSH_STATUS         AS pushStatus,
               A.ROBOT_ADMIN_LOCKING AS robotAdminLocking,
               A.ROBOT_CODE_CID      AS robotCodeCid,
               A.ROBOT_CODE_SIM      AS robotCodeSim,
               A.ROBOT_FAULT_STATE   AS robotFaultState,
               A.ROBOT_ID            AS robotId,
               A.ROBOT_POLLING_TYPE  AS robotPollingType,
               A.ROBOT_TYPE          AS robotType,
               A.CLIENT_VERSION      AS clientVersion,
               A.ROBOT_REMARKS       AS robotRemarks
        FROM SYS_ROBOT A
                 LEFT JOIN SYS_SCENIC_SPOT B ON A.SCENIC_SPOT_ID = B.SCENIC_SPOT_ID
        WHERE A.SCENIC_SPOT_ID = #{scenicSpotId}
          AND FIND_IN_SET(A.ROBOT_RUN_STATE, #{robotRunState})
    </select>
    <select id="getAppRobotOperationTime" resultMap="BaseResultAppRobotOperationTime" parameterType="java.util.Map">
        SELECT
        A.ROBOT_CODE AS robotCode,
        (
        SELECT
        IFNULL( SUM( B.TOTAL_TIME ), 0 )
        FROM
        SYS_ORDER B
        WHERE
        A.ROBOT_CODE = B.ORDER_ROBOT_CODE
        AND STR_TO_DATE( B.ORDER_START_TIME, '%Y-%m-%d' ) BETWEEN #{startTime}
        AND #{endTime}
        ) AS totalTime
        FROM
        SYS_ROBOT A
        <where>
            <if test="scenicSpotId != null and scenicSpotId != ''">
                AND A.SCENIC_SPOT_ID = #{scenicSpotId}
            </if>
            <if test="robotCode != null and robotCode != ''">
                AND A.ROBOT_CODE = #{robotCode}
            </if>
        </where>
    </select>
    <select id="getRobotState" parameterType="java.util.Map" resultType="int">
        SELECT
        COUNT( ROBOT_CODE )
        FROM
        SYS_ROBOT
        <where>
            <if test="robotRunState !=null and robotRunState != ''">
                AND FIND_IN_SET(ROBOT_RUN_STATE,#{robotRunState})
            </if>
            <if test="robotFaultState == 30">
                AND ROBOT_FAULT_STATE = '30'
            </if>
            <if test="robotFaultState != 30">
                AND ROBOT_FAULT_STATE != '30'
            </if>
        </where>
    </select>

    <select id="getOperateStateList" resultMap="operateState" parameterType="java.util.Map">
        SELECT
        a.SCENIC_SPOT_NAME AS scenicName,
        a.ROBOT_CODE AS robotId,
        a.ROBOT_MODEL AS robotModel,
        CASE

        WHEN a.opeState IS NULL
        OR a.opeState = 0 THEN
        '正常' ELSE '故障'
        END opeState
        FROM
        (
        SELECT
        B.SCENIC_SPOT_NAME,
        A.ROBOT_CODE,
        A.ROBOT_MODEL,
        (
        SELECT
        COUNT( C.ERROR_RECORDS_ID )
        FROM
        SYS_ROBOT_ERROR_RECORDS C
        WHERE
        A.ROBOT_CODE = C.ROBOT_CODE
        AND STR_TO_DATE( CREATE_TIME, '%Y-%m-%d' ) BETWEEN #{startTime}
        AND #{endTime}
        ) opeState
        FROM
        SYS_ROBOT A
        LEFT JOIN SYS_SCENIC_SPOT B ON A.SCENIC_SPOT_ID = B.SCENIC_SPOT_ID
        <where>
            <if test="scenicSpotId != null and scenicSpotId != ''">
                A.SCENIC_SPOT_ID = #{scenicSpotId}
            </if>
        </where>
        )a
    </select>
    <select id="getOperateStateSpotList" resultType="java.util.HashMap">
        SELECT b.SPOT_ID as spotId,
        b.SPOT_NAME as 'spotName',
        b.total as 'yys',
        ifnull(round(b.total / ifnull(srtd.count, 0) * 100, 2) ,0) as 'yysbl',
        ifnull(srtd.count, 0) - b.total as 'wys',
        ifnull(round((ifnull(srtd.count, 0) - b.total) / ifnull(srtd.count, 0) * 100,
        2),0) as 'wysbl',
        IFNULL(c.robot_count, 0) as 'gz',
        ifnull(round(IFNULL(c.robot_count, 0) / ifnull(srtd.count, 0) * 100, 2),0) as 'gzbl',
        ifnull( round( (IFNULL(d.robot_count,0) - IFNULL(c.robot_count,0)) / IFNULL(d.robot_count,0) * 100 ,2 ),0) as
        'jkd'
        from (
        SELECT sss.SCENIC_SPOT_ID as SPOT_ID,
        sss.SCENIC_SPOT_NAME as SPOT_NAME,
        COUNT(a.ROBOT_CODE) as total
        FROM SYS_SCENIC_SPOT sss
        left join (
        SELECT DISTINCT ssoi.SPOT_ID,
        ssoi.SPOT_NAME,
        ssoi.ROBOT_CODE
        from SYS_SCENIC_OPERATIONAL_INVENTORY ssoi
        <where>
            <if test="beginDate != null and beginDate != ''">
                and ssoi.`DATE` &gt;= #{beginDate}
            </if>
            <if test="endDate != null and endDate != ''">
                and ssoi.`DATE` &lt;= #{endDate}
            </if>
        </where>
        ) a ON
        sss.SCENIC_SPOT_ID = a.SPOT_ID
        <where>
            <if test="spotId != null">
                sss.SCENIC_SPOT_ID = #{spotId}
            </if>
        </where>
        GROUP by sss.SCENIC_SPOT_ID,
        sss.SCENIC_SPOT_NAME) b
        LEFT JOIN S_ROBOT_TOTAL_DAY srtd on
        b.SPOT_ID = srtd.SOPT_ID
        <if test="endDate != null and endDate != ''">
            and srtd.`DATE` = #{endDate}
        </if>
        LEFT JOIN (
        select sr.SCENIC_SPOT_ID,
        COUNT(sr.robot_code) as robot_count
        from SYS_ROBOT sr
        where sr.robot_fault_state &lt;&gt; 10
        GROUP by sr.SCENIC_SPOT_ID) c ON
        b.spot_id = c.SCENIC_SPOT_ID
        LEFT JOIN (
        SELECT
        sr.SCENIC_SPOT_ID,
        COUNT( sr.robot_code ) AS robot_count
        FROM
        SYS_ROBOT sr
        GROUP BY
        sr.SCENIC_SPOT_ID
        ) d ON b.spot_id = d.SCENIC_SPOT_ID

        <choose>
            <when test="field != null and field != ''">
                order by ${field}
            </when>
            <otherwise>
                order by srtd.count desc
            </otherwise>
        </choose>
    </select>

    <select id="getOperateStateSpotSum" resultType="java.util.HashMap">
        SELECT '' as spotId,
        '合计' as 'spotName',
        SUM(b.total) as 'yys',
        ifnull(ROUND(SUM(b.total) / SUM(ifnull(srtd.count, 0)) * 100, 2) , 0) as 'yysbl',
        SUM(ifnull(srtd.count, 0) - b.total) as 'wys',
        ifnull(ROUND(SUM(ifnull(srtd.count, 0) - b.total) / SUM(ifnull(srtd.count, 0)) * 100,
        2) , 0) as 'wysbl',
        SUM(IFNULL(c.robot_count, 0)) as 'gz',
        ifnull(ROUND(SUM(IFNULL(c.robot_count, 0)) / SUM(ifnull(srtd.count, 0)) * 100, 2),0) as 'gzbl',
        ifnull( round( (SUM(IFNULL(d.robot_count,0)) - SUM(IFNULL(c.robot_count,0))) / SUM(IFNULL(d.robot_count,0)) *
        100 ,2 ),0) as 'jkd'
        from (
        SELECT sss.SCENIC_SPOT_ID as SPOT_ID,
        sss.SCENIC_SPOT_NAME as SPOT_NAME,
        COUNT(a.ROBOT_CODE) as total
        FROM SYS_SCENIC_SPOT sss
        left join (
        SELECT DISTINCT ssoi.SPOT_ID,
        ssoi.SPOT_NAME,
        ssoi.ROBOT_CODE
        from SYS_SCENIC_OPERATIONAL_INVENTORY ssoi
        <where>
            <if test="beginDate != null and beginDate != ''">
                and ssoi.`DATE` &gt;= #{beginDate}
            </if>
            <if test="endDate != null and endDate != ''">
                and ssoi.`DATE` &lt;= #{endDate}
            </if>
        </where>
        ) a ON
        sss.SCENIC_SPOT_ID = a.SPOT_ID
        <where>
            <if test="spotId != null">
                sss.SCENIC_SPOT_ID = #{spotId}
            </if>
        </where>
        GROUP by sss.SCENIC_SPOT_ID,
        sss.SCENIC_SPOT_NAME) b
        LEFT JOIN S_ROBOT_TOTAL_DAY srtd on
        b.SPOT_ID = srtd.SOPT_ID
        <if test="endDate != null and endDate != ''">
            and srtd.`DATE` = #{endDate}
        </if>
        LEFT JOIN (
        select sr.SCENIC_SPOT_ID,
        COUNT(sr.robot_code) as robot_count
        from SYS_ROBOT sr
        where sr.robot_fault_state &lt;&gt; 10
        GROUP by sr.SCENIC_SPOT_ID) c ON
        b.spot_id = c.SCENIC_SPOT_ID
        LEFT JOIN (
        SELECT
        sr.SCENIC_SPOT_ID,
        COUNT( sr.robot_code ) AS robot_count
        FROM
        SYS_ROBOT sr
        GROUP BY
        sr.SCENIC_SPOT_ID
        ) d ON b.spot_id = d.SCENIC_SPOT_ID

    </select>
    <select id="getFaultNum" resultType="int" parameterType="java.util.Map">
        SELECT
        CASE
        WHEN
        COUNT( a.ROBOT_CODE ) IS NULL
        OR COUNT( a.ROBOT_CODE ) = 0 THEN
        '0' ELSE COUNT( a.ROBOT_CODE )
        END inUse
        FROM
        (
        SELECT
        ROBOT_CODE
        FROM
        SYS_ROBOT_ERROR_RECORDS
        WHERE
        STR_TO_DATE( CREATE_TIME, '%Y-%m-%d' ) BETWEEN #{startTime}
        AND #{endTime}
        <if test="scenicSpotId != null and scenicSpotId != ''">
            AND SCENIC_SPOT_ID = #{scenicSpotId}
        </if>
        GROUP BY
        ROBOT_CODE
        ) a
    </select>


    <select id="getOperateStateRobotList" resultType="java.util.HashMap">
        SELECT sss.SCENIC_SPOT_NAME,
        sr.ROBOT_CODE,
        IFNULL(a.ORDER_AMOUNT, 0) as ORDER_AMOUNT,
        IFNULL(a.TOTAL_TIME, 0) as TOTAL_TIME
        from SYS_ROBOT sr
        LEFT JOIN SYS_SCENIC_SPOT sss on
        sr.SCENIC_SPOT_ID = sss.SCENIC_SPOT_ID
        left join(
        SELECT ssoi.SPOT_ID,
        ssoi.ROBOT_CODE,
        SUM(ssoi.REAL_AMOUNT) as ORDER_AMOUNT,
        SUM(ssoi.TOTAL_TIME) as TOTAL_TIME
        from SYS_SCENIC_OPERATIONAL_INVENTORY ssoi
        <where>
            <if test="beginDate != null and beginDate != ''">
                and ssoi.`DATE` &gt;= #{beginDate}
            </if>
            <if test="endDate != null and endDate != ''">
                and ssoi.`DATE` &lt;= #{endDate}
            </if>
        </where>
        group by ssoi.SPOT_ID,
        ssoi.ROBOT_CODE
        ) a
        on
        sr.ROBOT_CODE = a.ROBOT_CODE
        AND a.SPOT_ID = sr.SCENIC_SPOT_ID
        <where>
            <if test="spotId != null">
                and sr.SCENIC_SPOT_ID = #{spotId}
            </if>
            <choose>
                <when test="type == 1">
                    and IFNULL(a.ORDER_AMOUNT, 0) &lt;&gt; 0
                </when>
                <when test="type == 2">
                    and IFNULL(a.ORDER_AMOUNT, 0) = 0
                </when>
                <when test="type == 3">
                    and sr.ROBOT_FAULT_STATE &lt;&gt; 10
                </when>
            </choose>
        </where>
        order by sss.SCENIC_SPOT_NAME,
        sr.ROBOT_CODE
    </select>

    <select id="getOperateStateRobotSum" resultType="java.util.HashMap">
        SELECT '合计' as SCENIC_SPOT_NAME,
        '' as ROBOT_CODE,
        SUM(ssoi.REAL_AMOUNT) as ORDER_AMOUNT,
        SUM(ssoi.TOTAL_TIME) as TOTAL_TIME
        from SYS_SCENIC_OPERATIONAL_INVENTORY ssoi
        <where>
            <if test="beginDate != null and beginDate != ''">
                and ssoi.`DATE` &gt;= #{beginDate}
            </if>
            <if test="endDate != null and endDate != ''">
                and ssoi.`DATE` &lt;= #{endDate}
            </if>
            <if test="spotId != null">
                and ssoi.SPOT_ID = #{spotId}
            </if>
        </where>
    </select>

    <update id="updateSysRobotEquipmentStatus">
        update SYS_ROBOT
        set EQUIPMENT_STATUS = #{equipmentStatus}
        where ROBOT_CODE = #{robotCode}
    </update>
    <update id="updateRobotUpgrade">
        UPDATE SYS_ROBOT
        SET AUTO_UPDATE_STATE = 6
        <where>
            <if test="scenicSpotId != null and scenicSpotId != ''">
                SCENIC_SPOT_ID =#{scenicSpotId}
            </if>
            <if test="robotId != null and robotId != ''">
                ROBOT_ID =#{robotId}
            </if>
        </where>
    </update>


    <select id="getRobotIdList" resultType="com.hna.hka.archive.management.system.dto.SysRobotIdDTO">
        select ROBOT_ID, ROBOT_CODE
        from SYS_ROBOT
    </select>

    <select id="getRobotStatisticsState" resultType="java.lang.Integer">
        select COUNT(*)
        from SYS_ROBOT
        where EQUIPMENT_STATUS = #{type}
    </select>


    <select id="getRobotListAll" resultType="com.hna.hka.archive.management.system.model.SysRobot">
        select *
        from SYS_ROBOT
        where SCENIC_SPOT_ID = #{spotId}
    </select>


    <select id="getSpotIdByRobotCount" resultType="java.lang.Long">
        select COUNT(*)
        from SYS_ROBOT
        where SCENIC_SPOT_ID = #{scenicSpotId}
    </select>


    <select id="getAppRobotListVoNew" resultMap="BaseResultAppRobot" parameterType="java.util.Map">
        SELECT
        A.ROBOT_CODE AS robotCode,
        A.ROBOT_GPS_BAI_DU AS robotGpsBaiDu,
        A.ROBOT_GPS_GPGGA AS robotGpsGpgga,
        A.ROBOT_GPS_SMALL_APP AS robotGpsSmallApp,
        A.ROBOT_POWER_STATE AS robotPowerState,
        A.ROBOT_RUN_STATE AS robotRunState,
        A.SCENIC_SPOT_ID AS scenicSpotId,
        B.SCENIC_SPOT_NAME AS scenicSpotName,
        A.CREATE_DATE AS createDate,
        A.PUSH_STATUS AS pushStatus,
        A.ROBOT_ADMIN_LOCKING AS robotAdminLocking,
        A.ROBOT_CODE_CID AS robotCodeCid,
        A.ROBOT_CODE_SIM AS robotCodeSim,
        A.ROBOT_FAULT_STATE AS robotFaultState,
        A.ROBOT_ID AS robotId,
        A.ROBOT_POLLING_TYPE AS robotPollingType,
        A.ROBOT_TYPE AS robotType,
        A.CLIENT_VERSION AS clientVersion,
        A.ROBOT_REMARKS AS robotRemarks
        FROM
        SYS_ROBOT A LEFT JOIN SYS_SCENIC_SPOT B ON A.SCENIC_SPOT_ID = B.SCENIC_SPOT_ID
        <where>
            <if test="scenicSpotId != null and scenicSpotId != ''">
                AND A.SCENIC_SPOT_ID = #{scenicSpotId}
            </if>
            <choose>
                <when test="robotRunState == 1">AND A.ROBOT_RUN_STATE in (10,70)</when>
                <when test="robotRunState == 2">AND A.ROBOT_RUN_STATE in (20,30,100)</when>
                <when test="robotRunState == 3">AND A.ROBOT_RUN_STATE in (40,50,80,90)</when>
                <when test="robotRunState == 4">AND A.ROBOT_RUN_STATE in (60)</when>
                <when test="robotRunState == 6">AND A.ROBOT_RUN_STATE in (110)</when>
                <otherwise>AND A.ROBOT_RUN_STATE in (10,70)</otherwise>
            </choose>
        </where>
        <choose>
            <when test="sortField == 1 and sort == 1">ORDER BY ROBOT_POWER_STATE ASC</when>
            <when test="sortField == 0 and sort == 1">ORDER BY ROBOT_CODE ASC</when>
            <when test="sortField == 1 and sort == 0">ORDER BY ROBOT_POWER_STATE DESC</when>
            <when test="sortField == 0 and sort == 0">ORDER BY ROBOT_CODE DESC</when>
            <otherwise>ORDER BY ROBOT_CODE ASC</otherwise>
        </choose>

    </select>


    <select id="getOperateRobotCount" resultType="java.lang.Integer">
        select COUNT(*)
        from SYS_ROBOT
        where ROBOT_FAULT_STATE not IN (20,30)
        <!--    and EQUIPMENT_STATUS not in (40)-->
    </select>

    <select id="getRestrictedAretList" resultType="com.hna.hka.archive.management.system.model.SysRobot">
        select sr.*,sss.SCENIC_SPOT_NAME,srv.ROBOT_VERSION_NUMBER AS robotVersionNumber
        from SYS_ROBOT sr
        left join SYS_SCENIC_SPOT sss on sr.SCENIC_SPOT_ID = sss.SCENIC_SPOT_ID
        LEFT JOIN SYS_ROBOT_VERSION srv ON sr.ROBOT_ID = srv.ROBOT_ID
        <where>
            <if test="scenicSpotId != null and scenicSpotId != ''">
                and sr.SCENIC_SPOT_ID = #{scenicSpotId}
            </if>
            <if test="robotCode != null and robotCode != ''">
                and sr.ROBOT_CODE = #{robotCode}
            </if>
            and sr.ROBOT_RUN_STATE in (20,30)
        </where>

    </select>


    <select id="getSpotIdByRobotCountFree" resultType="java.lang.Long">
        select COUNT(*)
        from SYS_ROBOT
        where SCENIC_SPOT_ID = #{scenicSpotId}
          and ROBOT_RUN_STATE = 10

    </select>

    <select id="getSpotIdByRobotCountWorking" resultType="java.lang.Integer">
        select COUNT(*)
        from SYS_ROBOT
        where SCENIC_SPOT_ID = #{scenicSpotId}
          and ROBOT_RUN_STATE in (20, 30)
    </select>

    <select id="getRobotCount" resultType="java.lang.Integer">
        select COUNT(*)
        from SYS_ROBOT
    </select>

    <select id="getSpotIdByRobotList" resultType="com.hna.hka.archive.management.system.model.SysRobot">
        select ROBOT_ID, ROBOT_CODE
        from SYS_ROBOT
        where SCENIC_SPOT_ID = #{scenicSpotId}
    </select>

    <select id="getRobotZGCList" resultType="com.hna.hka.archive.management.system.model.SysRobot">

        SELECT
        A.*,
        B.SCENIC_SPOT_NAME AS scenicSpotName,
        C.ROBOT_VERSION_NUMBER AS robotVersionNumber
        FROM
        ZGCZL_ROBOT_CODE E
        LEFT JOIN SYS_ROBOT A ON E.ROBOT_CODE = A.ROBOT_CODE
        LEFT JOIN SYS_USERS_ROLE_SPOT D ON D.SCENIC_SPOT_ID = A.SCENIC_SPOT_ID
        LEFT JOIN SYS_SCENIC_SPOT B ON A.SCENIC_SPOT_ID = B.SCENIC_SPOT_ID
        LEFT JOIN SYS_ROBOT_VERSION C ON A.ROBOT_ID = C.ROBOT_ID
        <where>
            <if test="userId != null and userId != ''">
                AND D.USER_ID = #{userId}
            </if>
            <if test="robotCode != null and robotCode != ''">
                AND A.ROBOT_CODE LIKE CONCAT('%',#{robotCode},'%')
            </if>
            <if test="scenicSpotId != null and scenicSpotId != ''">
                AND A.SCENIC_SPOT_ID = #{scenicSpotId}
            </if>
            <if test="robotCodeSim != null and robotCodeSim != ''">
                AND A.ROBOT_CODE_SIM LIKE CONCAT('%',#{robotCodeSim},'%')
            </if>
            <if test="robotRunState != null and robotRunState != ''">
                AND A.ROBOT_RUN_STATE = #{robotRunState}
            </if>
            <if test="clientVersion != null and clientVersion != ''">
                AND A.CLIENT_VERSION LIKE CONCAT('%',#{clientVersion},'%')
            </if>
            <if test="type != null and type != ''">
                AND B.ROBOT_WAKEUP_WORDS IN
                <foreach collection="type.split(',')" separator="," open="(" close=")" item="stat">
                    #{stat}
                </foreach>

            </if>
        </where>
        ORDER BY A.CREATE_DATE DESC
    </select>

    <select id="getRobotZGCExcel" resultMap="BaseResultExcelMap" parameterType="java.util.Map">

        SELECT
        A.ROBOT_CODE AS robotCode,
        A.ROBOT_CODE_SIM AS robotCodeSim,
        A.CREATE_DATE AS createDate,
        A.ROBOT_REMARKS AS robotRemarks,
        A.ROBOT_RUN_STATE as robotRunState,
        A.ROBOT_BATCH_NUMBER as robotBatchNumber,
        B.SCENIC_SPOT_NAME AS scenicSpotName,
        C.ROBOT_VERSION_NUMBER AS robotVersionNumber,
        A.CLIENT_VERSION AS clientVersion
        FROM
        ZGCZL_ROBOT_CODE E
        LEFT JOIN SYS_ROBOT A ON E.ROBOT_CODE = A.ROBOT_CODE
        LEFT JOIN SYS_USERS_ROLE_SPOT D ON D.SCENIC_SPOT_ID = A.SCENIC_SPOT_ID
        LEFT JOIN SYS_SCENIC_SPOT B ON A.SCENIC_SPOT_ID = B.SCENIC_SPOT_ID
        LEFT JOIN SYS_ROBOT_VERSION C ON A.ROBOT_ID = C.ROBOT_ID
        <where>
            <if test="userId != null and userId != ''">
                AND D.USER_ID = #{userId}
            </if>
            <if test="robotCode != null and robotCode != ''">
                AND A.ROBOT_CODE LIKE CONCAT('%',#{robotCode},'%')
            </if>
            <if test="scenicSpotId != null and scenicSpotId != ''">
                AND A.SCENIC_SPOT_ID = #{scenicSpotId}
            </if>
            <if test="robotRunState != null and robotRunState != ''">
                AND A.ROBOT_RUN_STATE = #{robotRunState}
            </if>
            <if test="type != null and type != ''">
                AND B.ROBOT_WAKEUP_WORDS IN
                <foreach collection="type.split(',')" separator="," open="(" close=")" item="stat">
                    #{stat}
                </foreach>
            </if>
        </where>
        ORDER BY A.CREATE_DATE DESC
    </select>


    <select id="getRunSpotIdRobotList" resultType="com.hna.hka.archive.management.system.model.SysRobot">
        SELECT *
        FROM SYS_ROBOT so
                 LEFT JOIN SYS_SCENIC_SPOT sss
                           ON so.SCENIC_SPOT_ID = sss.SCENIC_SPOT_ID
        WHERE sss.ROBOT_WAKEUP_WORDS = 1
    </select>
    <select id="getRobotUpgrade" resultType="com.hna.hka.archive.management.system.model.SysRobot">
        SELECT
        ROBOT_ID,
        ROBOT_CODE,
        SCENIC_SPOT_ID,
        CLIENT_VERSION,
        ROBOT_CODE_CID,
        AUTO_UPDATE_STATE
        FROM
        SYS_ROBOT
        <where>
            <if test="scenicSpotId != '' and scenicSpotId != null">
                SCENIC_SPOT_ID = #{scenicSpotId}
            </if>
            <if test="robotId != null and robotId != ''">
                ROBOT_ID =#{robotId}
            </if>
        </where>
        ORDER BY ROBOT_CODE
    </select>
    <select id="getRobotVersionPad"
            resultType="com.hna.hka.archive.management.system.model.SysRobotAppVersion">
        SELECT
        A.*,
        B.SCENIC_SPOT_NAME AS scenicSpotName
        FROM
        SYS_ROBOT_APP_VERSION A
        LEFT JOIN SYS_SCENIC_SPOT B ON A.SCENIC_SPOT_ID = B.SCENIC_SPOT_ID
        <where>
            <if test="scenicSpotId != null and scenicSpotId != ''">
                AND A.SCENIC_SPOT_ID = #{scenicSpotId}
            </if>
        </where>
        ORDER BY A.CREATE_DATE DESC
    </select>
    <select id="timingRobotAuto" resultType="com.hna.hka.archive.management.system.model.SysScenicSpot">
        SELECT
            SCENIC_SPOT_ID,
            SCENIC_SPOT_NAME,
            AUTO_UPDATE_MONITOR
        FROM
            SYS_SCENIC_SPOT
        WHERE
            AUTO_UPDATE_MONITOR = 1
    </select>

</mapper>

{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?c4a1","webpack:///./src/components/RobotTimeStatisticsTime.vue?c750","webpack:///./src/utils/utils.js","webpack:///src/components/RobotTimeStatisticsTime.vue","webpack:///./src/components/RobotTimeStatisticsTime.vue?b964","webpack:///./src/components/RobotTimeStatisticsTime.vue","webpack:///src/App.vue","webpack:///./src/App.vue?a7d1","webpack:///./src/App.vue","webpack:///./src/store/index.js","webpack:///./src/plugins/element.js","webpack:///./src/main.js","webpack:///./src/App.vue?f446","webpack:///./src/components/RobotTimeStatisticsTime.vue?cdf4"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","_vm","this","_h","$createElement","_c","_self","attrs","staticRenderFns","staticClass","ref","searchValidateForm","searchValidateFormRules","on","onChangeSearchCompany","model","callback","$$v","$set","expression","_l","item","index","COMPANY_NAME","COMPANY_ID","onChangeSearchSpot","SCENIC_SPOT_NAME","SCENIC_SPOT_ID","onChangeType","label","onDateChange","staticStyle","dateType","disabledTimeType","onChangeTimeType","disabledRobotCode","onReset","_v","disabledStatGrossProfit","$event","onStatGrossProfit","onExportReport","onSearch","downloadLoading","exportExcel","directives","rawName","tableData","prop","order","background","color","height","padding","getSummaries","onSortChange","activeFixed","sortable","scopedSlots","_u","fn","scope","_s","tableContentValue","row","_e","exportTableData","total","showTable","formatDateTime","datetime","type","year","getFullYear","toString","month","getMonth","padStart","date","getDate","currentDate","getYesterday","time","Date","getTime","oneDay","yesterdayTime","yesterday","checkNumberMethod","Number","Error","feeInput","taxInput","searchFeeInput","searchTaxInput","tableFields","searchTableFields","tableLoading","searchCompanyOptions","searchScenicOptions","dateStateOptions","typeOptions","statusOptions","timeTypeOptions","currentPage","pageSize","dialogVisible","dialogState","valueFormat","companyId","spotId","status","selectDateState","startEndDate","timeType","totalTime","robotCode","searchVF","searchVFEcharts","validateForm","companys","companyState","scenics","scenicState","timeChartData","typeTotalTime","echartsOrder","myChart","option","updateTable","validateFormRules","created","getValidateForm","loadTableData","initEchartsData","getCompanyList","getScenicList","getTimeChart","mounted","drawEcharts","methods","console","log","updateTableMethode","$nextTick","arr","forEach","values","keys","column","initTableData","$echarts","init","document","getElementById","tooltip","trigger","axisPointer","crossStyle","toolbox","feature","dataView","magicType","saveAsImage","legend","top","dataZoom","xAxis","yAxis","series","setOption","addEventListener","onChangeSubject","obj","subjectOptions","find","checkDate","subjectId","getTableData","getEchartsData","$refs","formName","validate","valid","startDate","endDate","confirmButtonText","cancelButtonText","exportReportEle","href","$confirm","message","offset","center","duration","onAdd","editRow","rowObj","assign","dialogClose","resetFields","handleClose","done","submitForm","columns","every","sums","reduce","isNaN","prev","curr","load","components","computed","component","RobotTimeStatisticsTime","Vue","use","Vuex","Store","state","mutations","actions","$message","confirm","elTableInfiniteScroll","directive","el","binding","selectWrap","querySelector","sign","scrollDistance","scrollHeight","scrollTop","clientHeight","axios","defaults","withCredentials","$http","config","productionTip","echarts","interceptors","request","NProgress","start","response","store","render","h","App","$mount"],"mappings":"aACE,SAASA,EAAqBC,GAQ7B,IAPA,IAMIC,EAAUC,EANVC,EAAWH,EAAK,GAChBI,EAAcJ,EAAK,GACnBK,EAAiBL,EAAK,GAIHM,EAAI,EAAGC,EAAW,GACpCD,EAAIH,EAASK,OAAQF,IACzBJ,EAAUC,EAASG,GAChBG,OAAOC,UAAUC,eAAeC,KAAKC,EAAiBX,IAAYW,EAAgBX,IACpFK,EAASO,KAAKD,EAAgBX,GAAS,IAExCW,EAAgBX,GAAW,EAE5B,IAAID,KAAYG,EACZK,OAAOC,UAAUC,eAAeC,KAAKR,EAAaH,KACpDc,EAAQd,GAAYG,EAAYH,IAG/Be,GAAqBA,EAAoBhB,GAE5C,MAAMO,EAASC,OACdD,EAASU,OAATV,GAOD,OAHAW,EAAgBJ,KAAKK,MAAMD,EAAiBb,GAAkB,IAGvDe,IAER,SAASA,IAER,IADA,IAAIC,EACIf,EAAI,EAAGA,EAAIY,EAAgBV,OAAQF,IAAK,CAG/C,IAFA,IAAIgB,EAAiBJ,EAAgBZ,GACjCiB,GAAY,EACRC,EAAI,EAAGA,EAAIF,EAAed,OAAQgB,IAAK,CAC9C,IAAIC,EAAQH,EAAeE,GACG,IAA3BX,EAAgBY,KAAcF,GAAY,GAE3CA,IACFL,EAAgBQ,OAAOpB,IAAK,GAC5Be,EAASM,EAAoBA,EAAoBC,EAAIN,EAAe,KAItE,OAAOD,EAIR,IAAIQ,EAAmB,GAKnBhB,EAAkB,CACrB,IAAO,GAGJK,EAAkB,GAGtB,SAASS,EAAoB1B,GAG5B,GAAG4B,EAAiB5B,GACnB,OAAO4B,EAAiB5B,GAAU6B,QAGnC,IAAIC,EAASF,EAAiB5B,GAAY,CACzCK,EAAGL,EACH+B,GAAG,EACHF,QAAS,IAUV,OANAf,EAAQd,GAAUW,KAAKmB,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAG/DI,EAAOC,GAAI,EAGJD,EAAOD,QAKfH,EAAoBM,EAAIlB,EAGxBY,EAAoBO,EAAIL,EAGxBF,EAAoBQ,EAAI,SAASL,EAASM,EAAMC,GAC3CV,EAAoBW,EAAER,EAASM,IAClC3B,OAAO8B,eAAeT,EAASM,EAAM,CAAEI,YAAY,EAAMC,IAAKJ,KAKhEV,EAAoBe,EAAI,SAASZ,GACX,qBAAXa,QAA0BA,OAAOC,aAC1CnC,OAAO8B,eAAeT,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DpC,OAAO8B,eAAeT,EAAS,aAAc,CAAEe,OAAO,KAQvDlB,EAAoBmB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQlB,EAAoBkB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,kBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKxC,OAAOyC,OAAO,MAGvB,GAFAvB,EAAoBe,EAAEO,GACtBxC,OAAO8B,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOlB,EAAoBQ,EAAEc,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRtB,EAAoB0B,EAAI,SAAStB,GAChC,IAAIM,EAASN,GAAUA,EAAOiB,WAC7B,WAAwB,OAAOjB,EAAO,YACtC,WAA8B,OAAOA,GAEtC,OADAJ,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASgB,EAAQC,GAAY,OAAO9C,OAAOC,UAAUC,eAAeC,KAAK0C,EAAQC,IAGzG5B,EAAoB6B,EAAI,GAExB,IAAIC,EAAaC,OAAO,gBAAkBA,OAAO,iBAAmB,GAChEC,EAAmBF,EAAW3C,KAAKsC,KAAKK,GAC5CA,EAAW3C,KAAOf,EAClB0D,EAAaA,EAAWG,QACxB,IAAI,IAAItD,EAAI,EAAGA,EAAImD,EAAWjD,OAAQF,IAAKP,EAAqB0D,EAAWnD,IAC3E,IAAIU,EAAsB2C,EAI1BzC,EAAgBJ,KAAK,CAAC,EAAE,kBAEjBM,K,2NCvJL,EAAS,WAAa,IAAIyC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,GAAK,QAAQ,CAACF,EAAG,+BAA+B,IAC7JG,EAAkB,GCDlB,EAAS,WAAa,IAAIP,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACI,YAAY,mBAAmB,CAACJ,EAAG,eAAe,CAACA,EAAG,YAAY,CAACI,YAAY,UAAU,CAACJ,EAAG,UAAU,CAACK,IAAI,qBAAqBD,YAAY,uBAAuBF,MAAM,CAAC,QAAS,EAAK,MAAQN,EAAIU,mBAAmB,cAAc,QAAQ,MAAQV,EAAIW,0BAA0B,CAACP,EAAG,eAAe,CAACE,MAAM,CAAC,MAAQ,GAAG,KAAO,cAAc,CAACF,EAAG,YAAY,CAACE,MAAM,CAAC,WAAa,GAAG,YAAc,QAAQ,UAAY,IAAIM,GAAG,CAAC,OAASZ,EAAIa,uBAAuBC,MAAM,CAAC9B,MAAOgB,EAAIU,mBAA4B,UAAEK,SAAS,SAAUC,GAAMhB,EAAIiB,KAAKjB,EAAIU,mBAAoB,YAAaM,IAAME,WAAW,iCAAiClB,EAAImB,GAAInB,EAAwB,sBAAE,SAASoB,EAAKC,GAAO,OAAOjB,EAAG,YAAY,CAACd,IAAI+B,EAAMf,MAAM,CAAC,MAAQc,EAAKE,aAAa,MAAQF,EAAKG,iBAAgB,IAAI,GAAGnB,EAAG,eAAe,CAACE,MAAM,CAAC,MAAQ,GAAG,KAAO,WAAW,CAACF,EAAG,YAAY,CAACE,MAAM,CAAC,WAAa,GAAG,YAAc,QAAQ,UAAY,IAAIM,GAAG,CAAC,OAASZ,EAAIwB,oBAAoBV,MAAM,CAAC9B,MAAOgB,EAAIU,mBAAyB,OAAEK,SAAS,SAAUC,GAAMhB,EAAIiB,KAAKjB,EAAIU,mBAAoB,SAAUM,IAAME,WAAW,8BAA8BlB,EAAImB,GAAInB,EAAuB,qBAAE,SAASoB,EAAKC,GAAO,OAAOjB,EAAG,YAAY,CAACd,IAAI+B,EAAMf,MAAM,CAAC,MAAQc,EAAKK,iBAAiB,MAAQL,EAAKM,qBAAoB,IAAI,GAAGtB,EAAG,eAAe,CAACE,MAAM,CAAC,MAAQ,GAAG,KAAO,SAAS,CAACF,EAAG,YAAY,CAACE,MAAM,CAAC,WAAa,GAAG,YAAc,WAAWM,GAAG,CAAC,OAASZ,EAAI2B,cAAcb,MAAM,CAAC9B,MAAOgB,EAAIU,mBAAuB,KAAEK,SAAS,SAAUC,GAAMhB,EAAIiB,KAAKjB,EAAIU,mBAAoB,OAAQM,IAAME,WAAW,4BAA4BlB,EAAImB,GAAInB,EAAe,aAAE,SAASoB,EAAKC,GAAO,OAAOjB,EAAG,YAAY,CAACd,IAAI+B,EAAMf,MAAM,CAAC,MAAQc,EAAKQ,MAAM,MAAQR,EAAKpC,YAAW,IAAI,GAAGoB,EAAG,eAAe,CAACE,MAAM,CAAC,MAAQ,GAAG,KAAO,WAAW,CAACF,EAAG,YAAY,CAACE,MAAM,CAAC,WAAa,GAAG,YAAc,YAAY,UAAY,IAAIQ,MAAM,CAAC9B,MAAOgB,EAAIU,mBAAyB,OAAEK,SAAS,SAAUC,GAAMhB,EAAIiB,KAAKjB,EAAIU,mBAAoB,SAAUM,IAAME,WAAW,8BAA8BlB,EAAImB,GAAInB,EAAiB,eAAE,SAASoB,EAAKC,GAAO,OAAOjB,EAAG,YAAY,CAACd,IAAI+B,EAAMf,MAAM,CAAC,MAAQc,EAAKQ,MAAM,MAAQR,EAAKpC,YAAW,IAAI,GAAGoB,EAAG,eAAe,CAACE,MAAM,CAAC,MAAQ,GAAG,KAAO,oBAAoB,CAACF,EAAG,YAAY,CAACE,MAAM,CAAC,WAAa,GAAG,YAAc,aAAaM,GAAG,CAAC,OAASZ,EAAI6B,cAAcf,MAAM,CAAC9B,MAAOgB,EAAIU,mBAAkC,gBAAEK,SAAS,SAAUC,GAAMhB,EAAIiB,KAAKjB,EAAIU,mBAAoB,kBAAmBM,IAAME,WAAW,uCAAuClB,EAAImB,GAAInB,EAAoB,kBAAE,SAASoB,EAAKC,GAAO,OAAOjB,EAAG,YAAY,CAACd,IAAI+B,EAAMf,MAAM,CAAC,MAAQc,EAAKQ,MAAM,MAAQR,EAAKpC,YAAW,IAAI,GAAGoB,EAAG,eAAe,CAAC0B,YAAY,CAAC,MAAQ,SAASxB,MAAM,CAAC,MAAQ,GAAG,KAAO,iBAAiB,CAACF,EAAG,iBAAiB,CAACE,MAAM,CAAC,gBAAgB,GAAG,KAAON,EAAI+B,SAAS,kBAAkB,IAAI,oBAAoB,OAAO,kBAAkB,QAAQjB,MAAM,CAAC9B,MAAOgB,EAAIU,mBAA+B,aAAEK,SAAS,SAAUC,GAAMhB,EAAIiB,KAAKjB,EAAIU,mBAAoB,eAAgBM,IAAME,WAAW,sCAAsC,GAAGd,EAAG,eAAe,CAACE,MAAM,CAAC,MAAQ,GAAG,KAAO,aAAa,CAACF,EAAG,YAAY,CAACE,MAAM,CAAC,WAAa,GAAG,YAAc,UAAU,SAAWN,EAAIgC,kBAAkBpB,GAAG,CAAC,OAASZ,EAAIiC,kBAAkBnB,MAAM,CAAC9B,MAAOgB,EAAIU,mBAA2B,SAAEK,SAAS,SAAUC,GAAMhB,EAAIiB,KAAKjB,EAAIU,mBAAoB,WAAYM,IAAME,WAAW,gCAAgClB,EAAImB,GAAInB,EAAmB,iBAAE,SAASoB,EAAKC,GAAO,OAAOjB,EAAG,YAAY,CAACd,IAAI+B,EAAMf,MAAM,CAAC,MAAQc,EAAKQ,MAAM,MAAQR,EAAKpC,YAAW,IAAI,GAAGoB,EAAG,eAAe,CAACE,MAAM,CAAC,MAAQ,GAAG,KAAO,cAAc,CAACF,EAAG,WAAW,CAACE,MAAM,CAAC,YAAc,WAAWQ,MAAM,CAAC9B,MAAOgB,EAAIU,mBAA4B,UAAEK,SAAS,SAAUC,GAAMhB,EAAIiB,KAAKjB,EAAIU,mBAAoB,YAAaM,IAAME,WAAW,mCAAmC,GAAGd,EAAG,eAAe,CAACE,MAAM,CAAC,MAAQ,GAAG,KAAO,cAAc,CAACF,EAAG,WAAW,CAACE,MAAM,CAAC,YAAc,WAAW,SAAWN,EAAIkC,mBAAmBpB,MAAM,CAAC9B,MAAOgB,EAAIU,mBAA4B,UAAEK,SAAS,SAAUC,GAAMhB,EAAIiB,KAAKjB,EAAIU,mBAAoB,YAAaM,IAAME,WAAW,mCAAmC,IAAI,GAAGd,EAAG,MAAM,CAACA,EAAG,YAAY,CAACE,MAAM,CAAC,KAAO,UAAU,KAAO,yBAAyBM,GAAG,CAAC,MAAQZ,EAAImC,UAAU,CAACnC,EAAIoC,GAAG,QAAQhC,EAAG,YAAY,CAACE,MAAM,CAAC,KAAO,UAAU,KAAO,oBAAoB,SAAWN,EAAIqC,yBAAyBzB,GAAG,CAAC,MAAQ,SAAS0B,GAAQ,OAAOtC,EAAIuC,kBAAkB,yBAAyB,CAACvC,EAAIoC,GAAG,UAAUhC,EAAG,IAAI,CAACE,MAAM,CAAC,KAAO,GAAG,GAAK,eAAe,SAAW,cAAc,CAACF,EAAG,YAAY,CAACE,MAAM,CAAC,KAAO,UAAU,KAAO,kBAAkBM,GAAG,CAAC,MAAQZ,EAAIwC,iBAAiB,CAACxC,EAAIoC,GAAG,WAAW,GAAGhC,EAAG,YAAY,CAACE,MAAM,CAAC,KAAO,UAAU,KAAO,kBAAkBM,GAAG,CAAC,MAAQ,SAAS0B,GAAQ,OAAOtC,EAAIyC,SAAS,yBAAyB,CAACzC,EAAIoC,GAAG,UAAUhC,EAAG,YAAY,CAACE,MAAM,CAAC,KAAO,UAAU,QAAUN,EAAI0C,gBAAgB,KAAO,qBAAqB9B,GAAG,CAAC,MAAQZ,EAAI2C,cAAc,CAAC3C,EAAIoC,GAAG,WAAW,IAAI,GAAGhC,EAAG,MAAM,CAACwC,WAAW,CAAC,CAACrE,KAAK,OAAOsE,QAAQ,SAAS7D,MAAOgB,EAAa,UAAEkB,WAAW,eAAe,CAACd,EAAG,UAAU,CAAEJ,EAAe,YAAEI,EAAG,WAAW,CAACwC,WAAW,CAAC,CAACrE,KAAK,UAAUsE,QAAQ,YAAY7D,MAAOgB,EAAgB,aAAEkB,WAAW,gBAAgB,CAAC3C,KAAK,WAAWsE,QAAQ,aAAa7D,MAAOgB,EAAQ,KAAEkB,WAAW,SAASV,YAAY,QAAQsB,YAAY,CAAC,MAAQ,QAAQxB,MAAM,CAAC,KAAON,EAAI8C,UAAU,OAAS,GAAG,eAAe,CAACC,KAAM,YAAaC,MAAO,cAAc,oBAAoB,CAAEC,WAAY,UAAUC,MAAO,UAAWC,OAAQ,OAAQC,QAAS,OAAQ,aAAa,CAACD,OAAQ,OAAOC,QAAS,KAAK,aAAa,QAAQ,eAAe,GAAG,iBAAiBpD,EAAIqD,cAAczC,GAAG,CAAC,cAAcZ,EAAIsD,eAAe,CAACtD,EAAImB,GAAInB,EAAe,aAAE,SAAShB,EAAMM,GAAK,MAAO,CAACc,EAAG,kBAAkB,CAACd,IAAIA,EAAIgB,MAAM,CAAC,KAAOtB,EAAM,MAAQM,EAAI,YAAY,MAAM,MAAQU,EAAIuD,YAAYvE,GAAO,SAAWgB,EAAIwD,SAASxE,IAAQyE,YAAYzD,EAAI0D,GAAG,CAAC,CAACpE,IAAI,UAAUqE,GAAG,SAASC,GAAO,MAAO,CAACxD,EAAG,MAAM,CAACJ,EAAIoC,GAAG,IAAIpC,EAAI6D,GAAG7D,EAAI8D,kBAAkBF,EAAMG,IAAK/E,IAAQ,WAAW,MAAK,UAAY,GAAGgB,EAAIgE,KAAK5D,EAAG,WAAW,CAACI,YAAY,QAAQsB,YAAY,CAAC,MAAQ,OAAO,QAAU,QAAQxB,MAAM,CAAC,GAAK,WAAW,KAAON,EAAIiE,gBAAgB,OAAS,GAAG,eAAe,GAAG,iBAAiBjE,EAAIqD,eAAerD,EAAImB,GAAInB,EAAe,aAAE,SAAShB,EAAMM,GAAK,OAAOc,EAAG,kBAAkB,CAACd,IAAIA,EAAIgB,MAAM,CAAC,KAAOtB,EAAM,MAAQM,EAAI,YAAY,MAAM,MAAQ,UAAUmE,YAAYzD,EAAI0D,GAAG,CAAC,CAACpE,IAAI,UAAUqE,GAAG,SAASC,GAAO,MAAO,CAACxD,EAAG,MAAM,CAACJ,EAAIoC,GAAG,IAAIpC,EAAI6D,GAAG7D,EAAI8D,kBAAkBF,EAAMG,IAAK/E,IAAQ,WAAW,MAAK,QAAU,IAAI,GAAGoB,EAAG,YAAY,CAACA,EAAG,MAAM,CAACJ,EAAIoC,GAAG,KAAKpC,EAAI6D,GAAG7D,EAAIkE,OAAO,UAAUlE,EAAI6D,GAAG5D,KAAK6C,UAAUnG,QAAQ,YAAY,GAAGyD,EAAG,MAAM,CAACwC,WAAW,CAAC,CAACrE,KAAK,OAAOsE,QAAQ,SAAS7D,OAAQgB,EAAImE,UAAWjD,WAAW,eAAeV,YAAY,cAAc,CAACJ,EAAG,MAAM,CAACE,MAAM,CAAC,GAAK,eAAeF,EAAG,QAAQ,IAAI,IAC1zN,EAAkB,G,4NC0Bf,SAASgE,EAAeC,GAAsB,IAAZC,EAAY,uDAAL,IAC1CC,EAAOF,EAASG,cAAcC,WAC9BC,GAASL,EAASM,WAAa,GAAGF,WAAWG,SAAS,EAAG,KACzDC,EAAOR,EACRS,UACAL,WACAG,SAAS,EAAG,KACXG,EAAc,GAWlB,MAVY,KAART,EAEFS,EAAcR,EAAO,IAAMG,EAAQ,IAAMG,EACxB,KAARP,EAETS,EAAcR,EAAO,IAAMG,EACV,KAARJ,IAETS,EAAcR,GAETQ,EAQF,SAASC,IACd,IAAIC,GAAO,IAAIC,MAAOC,UAClBC,EAAS,MACTC,EAAgBJ,EAAOG,EACvBE,EAAY,IAAIJ,KAAKG,GACzB,OAAOC,EC2HT,OACE/G,KAAM,wBACNpC,KAFF,WAOI,SAASoJ,IAAb,gEAEM,OAAO,SAAb,OACavG,GAEH+B,IAGGyE,OAAOxG,GAGV+B,IAFAA,EAAS,IAAI0E,MAAMlH,EAAO,YAyChC,MAAO,CACL4F,WAAW,EACXuB,SAAU,GACVC,SAAU,GACVC,eAAgB,GAChBC,eAAgB,GAChBC,YAAa,CACX,KAAM,YACN,OAAQ,WAGR,UAAW,YACX,KAAM,KACN,KAAM,KACN,QAAS,MACT,cAAe,SAGjBhD,UAAW,GAEXiD,kBAAmB,CACjB,KAAM,YACN,OAAQ,WAGR,UAAW,YACX,KAAM,KACN,KAAM,KACN,QAAS,MACT,cAAe,SAIjBC,cAAc,EAEdC,qBAAsB,GACtBC,oBAAqB,GACrBC,iBAAkB,CAAC,CACjBnH,MAAO,IACP4C,MAAO,QACf,CACQ5C,MAAO,IACP4C,MAAO,QACf,CACQ5C,MAAO,IACP4C,MAAO,SAETwE,YAAa,CAAC,CACZpH,MAAO,IACP4C,MAAO,SACf,CACQ5C,MAAO,IACP4C,MAAO,WAETyE,cAAe,CAAC,CACdrH,MAAO,IACP4C,MAAO,SACf,CACQ5C,MAAO,IACP4C,MAAO,QACf,CACQ5C,MAAO,IACP4C,MAAO,UAET0E,gBAAiB,CAAC,CAChBtH,MAAO,IACP4C,MAAO,QACf,CACQ5C,MAAO,IACP4C,MAAO,aAGTqC,gBAAiB,GACjBvB,iBAAiB,EAEjB6D,YAAa,EACbC,SAAU,GAEVC,eAAe,EAEfC,YAAa,GAEb3E,SAAU,YACV4E,YAAa,aAEbjG,mBAAoB,CAClBkG,UAAW,GACXC,OAAQ,GACRvC,KAAM,IACNwC,OAAQ,IACRC,gBAAiB,IACjBC,aAAc,CACtB,IACA,KAEQC,SAAU,IACVC,UAAW,GACXC,UAAW,IAEbC,SAAU,CACRR,UAAW,GACXC,OAAQ,GACRvC,KAAM,IACNwC,OAAQ,IACRC,gBAAiB,IACjBC,aAAc,CACtB,IACA,KAEQC,SAAU,IACVC,UAAW,GACXC,UAAW,IAEbE,gBAAiB,CACfT,UAAW,GACXC,OAAQ,GACRvC,KAAM,IACNwC,OAAQ,IACRC,gBAAiB,IACjBC,aAAc,CACtB,IACA,KAEQC,SAAU,IACVC,UAAW,GACXC,UAAW,IAEbG,aAAc,GAEdC,SAAU,GACVC,aAAc,GAEdC,QAAS,GACTC,YAAa,GAEbC,cAAe,GAEfzD,MAAO,EACP0D,cAAe,EAEf5E,MAAO,iBACP6E,aAAc,KAEdC,QAAS,KACTC,OAAQ,GAER1F,yBAAyB,EACzBL,kBAAkB,EAClBE,mBAAmB,EAEnB8F,aAAa,EAGbrH,wBAAyB,CAEvBuG,UAAW,CACnB,CAAU,UAAV,UAAU,UAAV,EAAU,QAAV,qBAKMe,kBAAmB,KAKvBC,QA/NF,WAiOIjI,KAAKkI,kBAELlI,KAAKmI,gBACLnI,KAAKoI,kBACLpI,KAAKqI,iBACLrI,KAAKsI,gBACLtI,KAAKuI,gBAEPC,QAzOF,WA0OIxI,KAAKyI,eAEPC,QAAS,CAEPR,gBAFJ,WAGM,IAAIb,EAAe,GACnB,IAAK,IAAIlG,KAAQnB,KAAK6F,YACpBwB,EAAarH,KAAK6F,YAAY1E,IAAS,GAEzCnB,KAAKqH,aAAeA,EACpBsB,QAAQC,IAAI5I,KAAKqH,eAInB,MAZJ,WAYA,8KACA,mEADA,kBACA,KADA,8CAOIwB,mBAnBJ,WAmBA,WACM7I,KAAK+H,aAAc,EACnB/H,KAAK8I,WAAU,WACb,EAAR,mBAOI,cA7BJ,WA6BA,+LACA,uBACA,WACA,QAGA,oBACA,WACA,QAGA,kBACA,WACA,QAGA,oBACA,WACA,QAGA,6BACA,WACA,QAGA,0BAEA,UAOA,2DACA,6DAJA,OACA,QAMA,sBACA,WACA,QAGA,uBACA,WACA,QAGA,uBACA,WACA,QAGA,gBAEA,GACA,YACA,SACA,OACA,SACA,WACA,YACA,UACA,WACA,YACA,YACA,cACA,qCACA,qBAGA,kBAxEA,UAyEA,sDACA,WA1EA,wBAyEA,EAzEA,EAyEA,KAIA,iBAEA,uBACA,gBACA,mBAEA,qBACA,gBACA,4BAEA,mBAvFA,kBA0FA,GA1FA,+CAgGI,cA7HJ,WA6HA,6LACA,uBACA,WACA,QAGA,oBACA,WACA,QAGA,kBACA,WACA,QAGA,oBACA,WACA,QAGA,6BACA,WACA,QAGA,0BAEA,UAOA,2DACA,6DAJA,OACA,QAMA,sBACA,WACA,QAGA,uBACA,WACA,QAGA,uBACA,WACA,QAGA,KACA,GACA,YACA,SACA,OACA,SACA,WACA,YACA,UACA,WACA,YACA,YACA,cACA,qCACA,qBAGA,4BAvEA,wBAwEA,YACA,YACA,eACA,WACA,UACA,eA7EA,kCAkFA,kBAlFA,UAmFA,sDACA,WApFA,wBAmFA,EAnFA,EAmFA,KAIA,iBAEA,iBACA,iBACA,oDACA,qBACA,gBACA,6BAEA,YACA,YACA,eACA,WACA,UACA,eAIA,mBAzGA,kBA4GA,GA5GA,+CAkHI,gBA/OJ,WA+OA,+OACA,8BACA,WACA,QAGA,2BACA,WACA,QAGA,yBACA,WACA,QAGA,2BACA,WACA,QAGA,oCACA,WACA,QAGA,iCAEA,UAOA,yEACA,yEAEA,mBANA,OACA,QAQA,6BACA,WACA,QAGA,8BACA,WACA,QAGA,8BACA,WACA,QAKA,KAEA,EADA,KAKA,eAGA,KAEA,IADA,yBAKA,eAEA,MACA,gCAEA,gCACA,kCAEA,6BAIA,+BArFA,UAwFA,sDACA,QACA,YACA,SACA,OACA,SACA,WACA,YACA,UACA,WACA,YACA,YACA,wBApGA,wBAwFA,EAxFA,EAwFA,KAgBA,iBAGA,wBAEA,kBAIA,KAEA,KAEA,KAEA,KAEA,KAEA,KAEA,KAGA,KAEA,KAEA,KAEA,KAEA,KAEA,KACA,KACA,iBACA,aACA,SACA,SACA,WACA,uBACA,mBACA,oBACA,gBACA,oBACA,aACA,aACA,cAGA,iBACA,oBAEA,6BAEA,gBAGA,6BAEA,YAEA,6BAEA,YAEA,6BAEA,cACA,kBAGA,cACA,UAEA,cACA,UACA,OACA,OACA,UAGA,eACA,WACA,QACA,QACA,aAIA,6BACA,6BACA,6BACA,6BACA,kBAGA,6BAIA,KACA,iCAEA,YAGA,OAEA,yBAEA,0BAIA,gEAEA,SAEA,OADA,iBACA,GAGA,0BAGA,2CACA,yCACA,6BAEA,+CACA,2BAIA,gBACA,6BAEA,6BAIA,MACA,yBACA,0BAGA,gEAEA,SAEA,OADA,iBACA,GAGA,0BAGA,2CACA,wCACA,6BAEA,+CACA,2BAIA,gBACA,6BAEA,8BAIA,MACA,yBACA,0BAGA,gEAEA,SAEA,OADA,iBACA,GAGA,0BAGA,2CACA,wCACA,6BAEA,+CACA,2BAIA,gBACA,6BAEA,6BAIA,OACA,yBACA,0BAIA,gEAGA,SAEA,OADA,iBACA,GAcA,KACA,KACA,qCACA,aACA,gBAEA,0BAEA,2CACA,wCACA,6BAEA,+CACA,2BAIA,gBACA,6BAEA,8BAGA,kCAEA,aAGA,OAEA,yBAEA,0BAGA,gEACA,SAEA,OADA,iBACA,GAGA,0BAGA,2CACA,wCACA,6BAEA,+CACA,2BAIA,gBACA,6BAEA,6BAIA,MACA,yBACA,0BAGA,gEACA,SAEA,OADA,iBACA,GAGA,0BAGA,2CACA,wCACA,6BAEA,+CACA,2BAIA,gBACA,6BAEA,8BAIA,MACA,yBACA,0BAGA,gEACA,SAEA,OADA,iBACA,GAGA,0BAGA,2CACA,wCACA,6BAEA,+CACA,2BAIA,gBACA,6BAEA,6BAIA,OACA,yBACA,0BAGA,gEACA,SAEA,OADA,iBACA,GAcA,KACA,KACA,qCACA,aACA,gBAEA,0BAEA,2CACA,wCACA,6BAEA,+CACA,2BAIA,gBACA,6BAEA,8BAKA,0BACA,0BAEA,+BAvfA,kBA0fA,GA1fA,+CAggBI,eA/uBJ,SA+uBA,0KACA,IACA,QAFA,SAIA,yDACA,QACA,YANA,mBAIA,EAJA,EAIA,KAKA,eATA,wBAUA,8BAVA,kBAWA,GAXA,iFAoBI,cAnwBJ,SAmwBA,0KACA,IACA,QAFA,SAIA,sDACA,QACA,eANA,mBAIA,EAJA,EAIA,KAKA,eATA,wBAUA,6BAVA,kBAWA,GAXA,iFAoBI,mBAvxBJ,WAuxBA,6LACA,iCACA,WACA,QAGA,8BACA,WACA,QAGA,4BACA,WACA,QAGA,8BACA,WACA,QAGA,uCACA,WACA,QAGA,oCAEA,UAOA,+EACA,iFAJA,OACA,QAMA,gCACA,WACA,QAGA,iCACA,WACA,QAGA,iCACA,WACA,QAnDA,UAsDA,sDACA,QACA,YACA,SACA,OACA,SACA,WACA,YACA,UACA,WACA,YACA,YACA,iBAlEA,oBAsDA,EAtDA,EAsDA,KAeA,eArEA,iBAsEA,yBAtEA,iGA+EI,aAt2BJ,WAs2BA,+KACA,oCACA,WACA,QAGA,iCAEA,UAOA,yEACA,2EAJA,OACA,QAbA,SAmBA,uDACA,uBACA,WACA,YACA,WAHA,UAGA,KAvBA,gBAmBA,EAnBA,EAmBA,KAOA,uBA1BA,8CA8BIlH,aAp4BJ,WAu4BM,IAAImH,EAAM,GACV,IAAK,IAAX,6BACQ,IAAR,KACQvK,EAAEhC,GAAKwD,KAAK8F,kBAAkBtJ,GAC9BuM,EAAI/L,KAAKwB,GAGoC,KAA3CwB,KAAKS,mBAAmBqG,iBAC1B9G,KAAK8B,SAAW,YAGX9B,KAAK8F,kBAAkBjJ,eAAe,OACzCkM,EAAIC,SAAQ,SAAtB,KAE0C,MAA1BrM,OAAOsM,OAAO9H,GAAM,IAEtB4H,EAAInL,OAAOwD,EAAQ,EAAG,EAAG,CAAvC,gBAIA,8CACQpB,KAAK8B,SAAW,aAGX9B,KAAK8F,kBAAkBjJ,eAAe,OACzCkM,EAAIC,SAAQ,SAAtB,KAC0C,MAA1BrM,OAAOsM,OAAO9H,GAAM,IACtB4H,EAAInL,OAAOwD,EAAQ,EAAG,EAAG,CAAvC,gBAIA,+CACQpB,KAAK8B,SAAW,YAGV9B,KAAK8F,kBAAkBjJ,eAAe,OAE1CkM,EAAIC,SAAQ,SAAtB,KAC0C,MAA1BrM,OAAOsM,OAAO9H,GAAM,IACtB4H,EAAInL,OAAOwD,EAAO,OAO1B,IAAI7D,EAAS,GACbwL,EAAIC,SAAQ,SAAlB,GACQzL,EAAOZ,OAAOuM,KAAK/H,GAAM,IAAMxE,OAAOsM,OAAO9H,GAAM,MAGrDnB,KAAK8F,kBAAoBvI,GAI3B8F,aA97BJ,YA87BA,kCACMsF,QAAQC,IAAIO,EAAQrG,EAAMC,GACb,aAATA,EACFA,EAAQ,MAChB,kBACQA,EAAQ,QAMR/C,KAAK+C,MAHFA,EAGU,GAArB,wBAFqB,KAIf/C,KAAKoJ,iBAMPX,YAj9BJ,WAi9BA,WACMzI,KAAK6H,QAAU7H,KAAKqJ,SAASC,KAAKC,SAASC,eAAe,YAE1DxJ,KAAK8H,OAAS,CACZ2B,QAAS,CACPC,QAAS,OACTC,YAAa,CACXtF,KAAM,QACNuF,WAAY,CACV3G,MAAO,UAIb4G,QAAS,CACPC,QAAS,CACPC,SAAU,CAAtB,qBACYC,UAAW,CAAvB,6BACYC,YAAa,CAAzB,WAGQC,OAAQ,CACNhO,KAAM,CAAC,UAAW,OAAQ,QAC1BiO,IAAK,GAEPC,SAAU,CAClB,CACU,KAAV,SACU,MAAV,EACU,IAAV,IAEA,CACU,KAAV,WAMQC,MAAO,CACf,CACU,KAAV,WACU,KAAV,iEACU,YAAV,CACY,KAAZ,YAIQC,MAAO,CACf,CACU,KAAV,QAKU,UAAV,CACY,UAAZ,eAGA,CACU,KAAV,QAKU,UAAV,CACY,UAAZ,eAIQC,OAAQ,CAChB,CACU,KAAV,UACU,KAAV,MAEU,KAAV,GAEU,UAAV,CACY,OAAZ,CACc,MAAd,CACgB,MAAhB,EACgB,SAAhB,MACgB,UAAhB,CACkB,MAAlB,QACkB,SAAlB,IAEgB,UAAhB,OAKA,CACU,KAAV,OACU,KAAV,OACU,WAAV,EACU,KAAV,IAEA,CACU,KAAV,OACU,KAAV,OACU,WAAV,EACU,KAAV,MAKMvK,KAAK6H,QAAQ2C,UAAUxK,KAAK8H,QAG5BlI,OAAO6K,iBAAiB,UAAU,WAChC,EAAR,qBAOI,aApkCJ,WAokCA,qKACA,KACA,KAEA,GACA,6EACA,8EAGA,GACA,yDACA,0DAIA,+bAfA,wDAsBA,oDACA,8CACA,0CACA,8CACA,gEACA,0DACA,kDACA,oDACA,oDAGA,oBAjCA,UAmCA,kBAnCA,QAmCA,EAnCA,OAqCA,iBACA,mCAtCA,+CA6CI,eAjnCJ,WAinCA,qKACA,KACA,KAEA,GACA,6EACA,8EAGA,GACA,uEACA,wEAIA,uBACA,eACA,gBACA,iBACA,qCACA,WAGA,ufAvBA,uBAyBA,wBAzBA,iCA8BA,2DACA,qDACA,iDACA,qDACA,uEACA,iEACA,yDACA,2DACA,2DAGA,oBAzCA,UA0CA,iBA1CA,yBA2CA,oBA3CA,QA2CA,EA3CA,OA6CA,iBACA,mCA9CA,+CAoDI,sBArqCJ,SAqqCA,qLAEA,mBAFA,UAEA,EAFA,OAGA,eACA,SAEA,wBAGA,YATA,uBAcA,+BAdA,0BAkBA,KACA,uBACA,gDACA,SAMA,QACA,iDA5BA,+CAiCI,mBAtsCJ,SAssCA,qLACA,oBADA,UACA,EADA,OAGA,SAEA,yBAGA,YARA,uBAaA,kCAbA,0BAiBA,KACA,uBACA,+CACA,SAMA,QACA,gDA3BA,+CAgCI/I,aAtuCJ,SAsuCA,GAIM,IAAIqH,EAAM,GACV,IAAK,IAAX,6BACQ,IAAR,KACQvK,EAAE,GAAV,0BACQuK,EAAI/L,KAAKwB,GAEX,GAAY,KAAR6F,EAAa,CAef,GAAMrE,KAAK8F,kBAAkBjJ,eAAe,SAI1C,IAAK,IAAIL,EAAIuM,EAAIrM,OAAS,EAAGF,EAAI,EAAGA,IACF,aAA5BG,OAAOsM,OAAOF,EAAIvM,IAAI,IACxBuM,EAAInL,OAAOpB,EAAG,GAMpBwD,KAAKoC,yBAA0B,EAC/BpC,KAAK+B,kBAAmB,EAGxB/B,KAAKiC,mBAAoB,MACjC,SAWajC,KAAK8F,kBAAkBjJ,eAAe,UAEzCkM,EAAInL,OAAO,EAAG,EAAG,CAA3B,sBAIQoC,KAAKoC,yBAA0B,EAC/BpC,KAAKS,mBAAmBuG,SAAW,IAGnChH,KAAKiC,mBAAoB,EAKpBjC,KAAK8F,kBAAkBjJ,eAAe,YAGzCkM,EAAInL,OAAO,EAAG,EAAG,CAA3B,wBAEQoC,KAAK+B,kBAAmB,GAI1B,IAAIxE,EAAS,GACbwL,EAAIC,SAAQ,SAAlB,GACQzL,EAAOZ,OAAOuM,KAAK/H,GAAM,IAAMxE,OAAOsM,OAAO9H,GAAM,MAErDnB,KAAK8F,kBAAoBvI,GAI3ByE,iBA3zCJ,SA2zCA,GAIM,IAAI+G,EAAM,GACV,IAAK,IAAX,6BACQ,IAAR,KACQvK,EAAEhC,GAAKwD,KAAK8F,kBAAkBtJ,GAC9BuM,EAAI/L,KAAKwB,GAGK,KAAZwI,EAKGhH,KAAK8F,kBAAkBjJ,eAAe,YAGzCkM,EAAInL,OAAO,EAAG,EAAG,CAA3B,wBAEA,QAKcoC,KAAK8F,kBAAkBjJ,eAAe,YAE1CkM,EAAIC,SAAQ,SAAtB,KAC0C,aAA1BrM,OAAOsM,OAAO9H,GAAM,IACtB4H,EAAInL,OAAOwD,EAAO,MAO1B,IAAI7D,EAAS,GACbwL,EAAIC,SAAQ,SAAlB,GACQzL,EAAOZ,OAAOuM,KAAK/H,GAAM,IAAMxE,OAAOsM,OAAO9H,GAAM,MAErDnB,KAAK8F,kBAAoBvI,GAO3B,gBA32CJ,SA22CA,mKAEA,KACA,qCACA,6BAEA,eACA,2BAPA,8CAuBI,aAl4CJ,SAk4CA,mKAEA,KACA,oCACA,iCAEA,mBACA,wBAPA,8CAcImN,gBAh5CJ,SAg5CA,GAEM,IAAN,KACMC,EAAM3K,KAAK4K,eAAeC,MAAK,SAArC,GACQ,OAAO1J,EAAKE,eAAiByJ,KAE/BnC,QAAQC,IAAI+B,EAAIrJ,YAChBtB,KAAKqH,aAAa0D,UAAYJ,EAAIrJ,YAKpCY,QA55CJ,WA85CMlC,KAAKS,mBAAmBkG,UAAY,GACpC3G,KAAKS,mBAAmBmG,OAAS,GACjC5G,KAAKS,mBAAmB4D,KAAO,IAC/BrE,KAAKS,mBAAmBoG,OAAS,IACjC7G,KAAKS,mBAAmBsG,aAAe,CAC7C,IACA,KAEM/G,KAAKS,mBAAmBuG,SAAW,IACnChH,KAAKS,mBAAmBwG,UAAY,GACpCjH,KAAKS,mBAAmByG,UAAY,GAEpClH,KAAKS,mBAAmBqG,gBAAkB,IAC1C9G,KAAK8B,SAAW,YAGhB9B,KAAKgL,eACLhL,KAAKiL,kBAIP3I,kBAn7CJ,SAm7CA,cACMtC,KAAKkL,MAAMC,GAAUC,UAAS,SAApC,GACQ,IAAIC,EA8CF,OADA1C,QAAQC,IAAI,mBACL,EAxCP,IAAI0C,EAAYnH,EAAe,EAAzC,yEAEcoH,EAAUpH,EAAe,EAAvC,yEAEcW,EAAcX,EAAe,IAAIc,KAAQ,EAAvD,oCAGcZ,EAAO,GACX,OAAQ,EAAlB,oCACY,IAAK,IACHA,EAAO,IACP,MACF,IAAK,IACHA,EAAO,IACP,MACF,IAAK,IACHA,EAAO,IACP,MACF,QACE,MAIAiH,GAAaxG,GAAeyG,GAAWzG,EACzC,EAAZ,sEACc0G,kBAAmB,KACnBC,iBAAkB,KAClBpH,KAAM,YACpB,iBACc,EAAd,aACc,EAAd,oBACA,uBAIY,EAAZ,aACY,EAAZ,sBAWI9B,eA1+CJ,WA0+CA,WACMvC,KAAK8I,WAAU,WACb,IAAI4C,EAAkBnC,SAASC,eAAe,gBAC9CkC,EAAgBC,KAAO,EAA/B,yBAKInJ,SAl/CJ,SAk/CA,cACMxC,KAAKkL,MAAMC,GAAUC,UAAS,SAApC,GACQ,IAAIC,EA6CF,OADA1C,QAAQC,IAAI,mBACL,EAxCP,IAAI0C,EAAYnH,EAAe,EAAzC,yEAEcoH,EAAUpH,EAAe,EAAvC,yEAEcW,EAAcX,EAAe,IAAIc,KAAQ,EAAvD,oCAGcZ,EAAO,GACX,OAAQ,EAAlB,oCACY,IAAK,IACHA,EAAO,IACP,MACF,IAAK,IACHA,EAAO,IACP,MACF,IAAK,IACHA,EAAO,IACP,MACF,QACE,MAIAiH,GAAaxG,GAAeyG,GAAWzG,EACzC,EAAZ,sEACc0G,kBAAmB,KACnBC,iBAAkB,KAClBpH,KAAM,YACpB,iBACc,EAAd,aACc,EAAd,kBACA,uBAIY,EAAZ,aACY,EAAZ,oBAUI3B,YAviDJ,WAuiDA,WACM1C,KAAK4L,SAAS,eAAgB,KAAM,CAClCJ,kBAAmB,KACnBC,iBAAkB,KAClBpH,KAAM,YACd,KAJA,wCAIA,qGACA,qBADA,SAGA,uBAHA,OAKA,wBACA,eAEA,0BACA,oCACA,GAGA,eACA,gBACA,WACA,eAEA,IACA,WAKA,cACA,kCAGA,kBAEA,SACA,+CAGA,OADA,qBACA,KAGA,YACA,eACA,wBACA,WACA,UACA,eA1CA,4CA4CA,kBACQ,EAAR,UACUA,KAAM,OACNwH,QAAS,eACTC,OAAQ,IACRC,QAAQ,EACRC,SAAU,UAOhBC,MArmDJ,WAsmDMjM,KAAKwG,eAAgB,EACrBxG,KAAKyG,YAAc,OAIrByF,QA3mDJ,SA2mDA,KACMvD,QAAQC,IAAIxH,EAAO0C,GACnB9D,KAAKwG,eAAgB,EAErB,IAAI2F,EAASxP,OAAOyP,OAAO,GAAItI,GAC/B9D,KAAKqH,aAAe8E,EACpBnM,KAAKyG,YAAc,QAIrB4F,YArnDJ,WAsnDMrM,KAAKwG,eAAgB,EACrBxG,KAAKkL,MAAM7D,aAAaiF,cACxBtM,KAAKkI,mBAIPqE,YA5nDJ,SA4nDA,GACMC,IACAxM,KAAKkL,MAAM7D,aAAaiF,cACxBtM,KAAKkI,mBAIPuE,WAnoDJ,SAmoDA,cACMzM,KAAKkL,MAAMC,GAAUC,UAAS,SAApC,GACQ,IAAIC,EAaF,OADA1C,QAAQC,IAAI,mBACL,EAZPD,QAAQC,IAAI,EAAtB,cACA,OAAc,EAAd,YAEYD,QAAQC,IAAI,UACxB,uBAEYD,QAAQC,IAAI,UAEd,EAAV,iBACU,EAAV,qCAWIxF,aA1pDJ,SA0pDA,cACA,qBACA,KA2BM,OA1BAsJ,EAAQ1D,SAAQ,SAAtB,KACQ,GAAc,IAAV5H,EAAJ,CAIA,IAAR,qDACa6H,EAAO0D,OAAM,SAA1B,wBACUC,EAAKxL,GAAS6H,EAAO4D,QAAO,SAAtC,KACY,IAAZ,YACY,OAAKC,MAAM/N,GAGFgO,EAFAA,EAAOC,IAI5B,GACUJ,EAAKxL,GAAS,IAMO,aAAnB+H,EAAO1J,WACTmN,EAAKxL,GAAS,EAAxB,yBApBUwL,EAAKxL,GAAS,QAwBXwL,GAiBTK,KAxsDJ,WAysDMjN,KAAKmI,kBAGT+E,WAAY,GAGZC,SAAU,CACR7J,YADJ,WAEM,OAAO,SAAb,MAQIO,kBAVJ,WAWM,OAAO,SAAb,KACQ,IAAItG,EAAS,GAOb,OAJEA,EADV,MAAY,GAAZ,QACmBuG,EAAI/E,GAAS,IAEb+E,EAAI/E,GAERxB,IAIXgG,SAvBJ,WAwBM,OAAO,SAAb,GACQ,IAAIhG,EAAS,GAMb,OAJEA,EADW,YAATwB,GAAgC,WAATA,GAA+B,UAATA,GAGtC,SAEJxB,MC/oEkV,I,wBCQ7V6P,EAAY,eACd,EACA,EACA,GACA,EACA,KACA,WACA,MAIa,EAAAA,E,QCXf,GACE9O,KAAM,MACN4O,WAAY,CACVG,wBAAJ,ICX8T,ICQ1T,G,UAAY,eACd,EACA,EACA/M,GACA,EACA,KACA,KACA,OAIa,I,oBChBfgN,aAAIC,IAAIC,QAEO,UAAIA,OAAKC,MAAM,CAC5BC,MAAO,GAEPC,UAAW,GAEXC,QAAS,GAET3Q,QAAS,K,+oBCUXqQ,aAAIC,IAAJ,MACAD,aAAIC,IAAJ,MACAD,aAAIC,IAAJ,MACAD,aAAIC,IAAJ,MACAD,aAAIC,IAAJ,MACAD,aAAIC,IAAJ,MACAD,aAAIC,IAAJ,KACAD,aAAIC,IAAJ,KACAD,aAAIC,IAAJ,KACAD,aAAIC,IAAJ,KACAD,aAAIC,IAAJ,KACAD,aAAIC,IAAJ,KACAD,aAAIC,IAAJ,KACAD,aAAIC,IAAJ,KACAD,aAAIC,IAAJ,KACAD,aAAIC,IAAJ,KACAD,aAAIC,IAAJ,KAEAD,aAAI1Q,UAAUiR,SAAd,IACAP,aAAI1Q,UAAUgP,SAAW,IAAWkC,Q,wFCjCpCR,aAAIC,IAAIQ,SAERT,aAAIU,UAAU,WAAY,CACxB1O,KADwB,SACnB2O,EAAIC,GACP,IAAMC,EAAaF,EAAGG,cAAc,2BACpCD,EAAW1D,iBAAiB,UAAU,WACpC,IAAI4D,EAAO,EACLC,EACJtO,KAAKuO,aAAevO,KAAKwO,UAAYxO,KAAKyO,aACxCH,GAAkBD,GACpBH,EAAQnP,cAUhB2P,KAAMC,SAASC,iBAAkB,EACjCtB,aAAI1Q,UAAUiS,MAAQH,KAEtBpB,aAAIwB,OAAOC,eAAgB,EAI3BzB,aAAI1Q,UAAUyM,SAAW2F,GAOzBN,KAAMO,aAAaC,QAAQ3B,KAAI,SAAAuB,GAI7B,OAFAK,KAAUC,QAEHN,KAGTJ,KAAMO,aAAaI,SAAS9B,KAAI,SAAAuB,GAI9B,OAFAK,KAAU3C,OAEHsC,KAGT,IAAIxB,aAAI,CACNgC,QACAC,OAAQ,SAACC,GAAD,OAAOA,EAAEC,MAChBC,OAAO,S,oCC3DV,W,2DCAA","file":"js/app.4f8e717f.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([1,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('robot-time-statistics-time')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"partner-company\"},[_c('el-container',[_c('el-header',{staticClass:\"header\"},[_c('el-form',{ref:\"searchValidateForm\",staticClass:\"search-validate-form\",attrs:{\"inline\":true,\"model\":_vm.searchValidateForm,\"label-width\":\"100px\",\"rules\":_vm.searchValidateFormRules}},[_c('el-form-item',{attrs:{\"label\":\"\",\"prop\":\"companyId\"}},[_c('el-select',{attrs:{\"filterable\":\"\",\"placeholder\":\"请选择公司\",\"clearable\":\"\"},on:{\"change\":_vm.onChangeSearchCompany},model:{value:(_vm.searchValidateForm.companyId),callback:function ($$v) {_vm.$set(_vm.searchValidateForm, \"companyId\", $$v)},expression:\"searchValidateForm.companyId\"}},_vm._l((_vm.searchCompanyOptions),function(item,index){return _c('el-option',{key:index,attrs:{\"label\":item.COMPANY_NAME,\"value\":item.COMPANY_ID}})}),1)],1),_c('el-form-item',{attrs:{\"label\":\"\",\"prop\":\"spotId\"}},[_c('el-select',{attrs:{\"filterable\":\"\",\"placeholder\":\"请选择景区\",\"clearable\":\"\"},on:{\"change\":_vm.onChangeSearchSpot},model:{value:(_vm.searchValidateForm.spotId),callback:function ($$v) {_vm.$set(_vm.searchValidateForm, \"spotId\", $$v)},expression:\"searchValidateForm.spotId\"}},_vm._l((_vm.searchScenicOptions),function(item,index){return _c('el-option',{key:index,attrs:{\"label\":item.SCENIC_SPOT_NAME,\"value\":item.SCENIC_SPOT_ID}})}),1)],1),_c('el-form-item',{attrs:{\"label\":\"\",\"prop\":\"type\"}},[_c('el-select',{attrs:{\"filterable\":\"\",\"placeholder\":\"请选择统计方式\"},on:{\"change\":_vm.onChangeType},model:{value:(_vm.searchValidateForm.type),callback:function ($$v) {_vm.$set(_vm.searchValidateForm, \"type\", $$v)},expression:\"searchValidateForm.type\"}},_vm._l((_vm.typeOptions),function(item,index){return _c('el-option',{key:index,attrs:{\"label\":item.label,\"value\":item.value}})}),1)],1),_c('el-form-item',{attrs:{\"label\":\"\",\"prop\":\"status\"}},[_c('el-select',{attrs:{\"filterable\":\"\",\"placeholder\":\"请选择景区运营状态\",\"clearable\":\"\"},model:{value:(_vm.searchValidateForm.status),callback:function ($$v) {_vm.$set(_vm.searchValidateForm, \"status\", $$v)},expression:\"searchValidateForm.status\"}},_vm._l((_vm.statusOptions),function(item,index){return _c('el-option',{key:index,attrs:{\"label\":item.label,\"value\":item.value}})}),1)],1),_c('el-form-item',{attrs:{\"label\":\"\",\"prop\":\"selectDateState\"}},[_c('el-select',{attrs:{\"filterable\":\"\",\"placeholder\":\"请选择日期统计方式\"},on:{\"change\":_vm.onDateChange},model:{value:(_vm.searchValidateForm.selectDateState),callback:function ($$v) {_vm.$set(_vm.searchValidateForm, \"selectDateState\", $$v)},expression:\"searchValidateForm.selectDateState\"}},_vm._l((_vm.dateStateOptions),function(item,index){return _c('el-option',{key:index,attrs:{\"label\":item.label,\"value\":item.value}})}),1)],1),_c('el-form-item',{staticStyle:{\"width\":\"350px\"},attrs:{\"label\":\"\",\"prop\":\"startEndDate\"}},[_c('el-date-picker',{attrs:{\"unlink-panels\":\"\",\"type\":_vm.dateType,\"range-separator\":\"至\",\"start-placeholder\":\"开始日期\",\"end-placeholder\":\"结束日期\"},model:{value:(_vm.searchValidateForm.startEndDate),callback:function ($$v) {_vm.$set(_vm.searchValidateForm, \"startEndDate\", $$v)},expression:\"searchValidateForm.startEndDate\"}})],1),_c('el-form-item',{attrs:{\"label\":\"\",\"prop\":\"timeType\"}},[_c('el-select',{attrs:{\"filterable\":\"\",\"placeholder\":\"请选择时长类型\",\"disabled\":_vm.disabledTimeType},on:{\"change\":_vm.onChangeTimeType},model:{value:(_vm.searchValidateForm.timeType),callback:function ($$v) {_vm.$set(_vm.searchValidateForm, \"timeType\", $$v)},expression:\"searchValidateForm.timeType\"}},_vm._l((_vm.timeTypeOptions),function(item,index){return _c('el-option',{key:index,attrs:{\"label\":item.label,\"value\":item.value}})}),1)],1),_c('el-form-item',{attrs:{\"label\":\"\",\"prop\":\"totalTime\"}},[_c('el-input',{attrs:{\"placeholder\":\"请输入运营时长\"},model:{value:(_vm.searchValidateForm.totalTime),callback:function ($$v) {_vm.$set(_vm.searchValidateForm, \"totalTime\", $$v)},expression:\"searchValidateForm.totalTime\"}})],1),_c('el-form-item',{attrs:{\"label\":\"\",\"prop\":\"robotCode\"}},[_c('el-input',{attrs:{\"placeholder\":\"请输入机器人编号\",\"disabled\":_vm.disabledRobotCode},model:{value:(_vm.searchValidateForm.robotCode),callback:function ($$v) {_vm.$set(_vm.searchValidateForm, \"robotCode\", $$v)},expression:\"searchValidateForm.robotCode\"}})],1)],1),_c('div',[_c('el-button',{attrs:{\"type\":\"primary\",\"icon\":\"el-icon-refresh-right\"},on:{\"click\":_vm.onReset}},[_vm._v(\"重置\")]),_c('el-button',{attrs:{\"type\":\"primary\",\"icon\":\"el-icon-data-line\",\"disabled\":_vm.disabledStatGrossProfit},on:{\"click\":function($event){return _vm.onStatGrossProfit('searchValidateForm')}}},[_vm._v(\"统计报表\")]),_c('a',{attrs:{\"href\":\"\",\"id\":\"exportReport\",\"download\":\"按时间统计运营时长\"}},[_c('el-button',{attrs:{\"type\":\"primary\",\"icon\":\"el-icon-s-data\"},on:{\"click\":_vm.onExportReport}},[_vm._v(\"导出报表\")])],1),_c('el-button',{attrs:{\"type\":\"primary\",\"icon\":\"el-icon-search\"},on:{\"click\":function($event){return _vm.onSearch('searchValidateForm')}}},[_vm._v(\"查询数据\")]),_c('el-button',{attrs:{\"type\":\"primary\",\"loading\":_vm.downloadLoading,\"icon\":\"el-icon-top-right\"},on:{\"click\":_vm.exportExcel}},[_vm._v(\"导出数据\")])],1)],1),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.showTable),expression:\"showTable\"}]},[_c('el-main',[(_vm.updateTable)?_c('el-table',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.tableLoading),expression:\"tableLoading\"},{name:\"loadmore\",rawName:\"v-loadmore\",value:(_vm.load),expression:\"load\"}],staticClass:\"table\",staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.tableData,\"border\":\"\",\"default-sort\":{prop: 'totalTime', order: 'descending'},\"header-cell-style\":{ background: '#f2f2f2',color: '#606266', height: '38px', padding: '0px' },\"cell-style\":{height: '38px',padding: '0'},\"max-height\":\"500px\",\"show-summary\":\"\",\"summary-method\":_vm.getSummaries},on:{\"sort-change\":_vm.onSortChange}},[_vm._l((_vm.tableFields),function(value,key){return [_c('el-table-column',{key:key,attrs:{\"prop\":value,\"label\":key,\"min-width\":\"130\",\"fixed\":_vm.activeFixed(value),\"sortable\":_vm.sortable(value)},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',[_vm._v(\" \"+_vm._s(_vm.tableContentValue(scope.row, value))+\" \")])]}}],null,true)})]})],2):_vm._e(),_c('el-table',{staticClass:\"table\",staticStyle:{\"width\":\"100%\",\"display\":\"none\"},attrs:{\"id\":\"outTable\",\"data\":_vm.exportTableData,\"border\":\"\",\"show-summary\":\"\",\"summary-method\":_vm.getSummaries}},_vm._l((_vm.tableFields),function(value,key){return _c('el-table-column',{key:key,attrs:{\"prop\":value,\"label\":key,\"min-width\":\"130\",\"align\":\"center\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',[_vm._v(\" \"+_vm._s(_vm.tableContentValue(scope.row, value))+\" \")])]}}],null,true)})}),1)],1),_c('el-footer',[_c('div',[_vm._v(\"一共\"+_vm._s(_vm.total)+\"条数据，已加载\"+_vm._s(this.tableData.length)+\"条数据\")])])],1),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(!_vm.showTable),expression:\"!showTable\"}],staticClass:\"my-echarts\"},[_c('div',{attrs:{\"id\":\"myChart\"}})]),_c('div')],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/**\r\n * 格式化月份（2021-09）\r\n */\r\nexport function formatMonth() {\r\n  var year = new Date().getFullYear().toString();\r\n  var month = (new Date().getMonth() + 1).toString().padStart(2, \"0\");\r\n  var currentMonth = year + \"-\" + month;\r\n  return currentMonth;\r\n}\r\n\r\n/**\r\n * 格式化日份（2021年9月17日）\r\n */\r\nexport function formatDate() {\r\n  var year = new Date().getFullYear().toString();\r\n  var month = (new Date().getMonth() + 1).toString().padStart(2, \"0\");\r\n  var date = new Date()\r\n    .getDate()\r\n    .toString()\r\n    .padStart(2, \"0\");\r\n  var currentDate = year + \"年\" + month + \"月\" + date + \"日\";\r\n  return currentDate;\r\n}\r\n\r\n/**\r\n * 格式化时间\r\n */\r\nexport function formatDateTime(datetime, type = \"1\") {\r\n  var year = datetime.getFullYear().toString();\r\n  var month = (datetime.getMonth() + 1).toString().padStart(2, \"0\");\r\n  var date = datetime\r\n    .getDate()\r\n    .toString()\r\n    .padStart(2, \"0\");\r\n  var currentDate = \"\";\r\n  if (type == \"1\") {\r\n    // 格式化为日\r\n    currentDate = year + \"-\" + month + \"-\" + date;\r\n  } else if (type == \"2\") {\r\n    // 格式化为月\r\n    currentDate = year + \"-\" + month;\r\n  } else if (type == \"3\") {\r\n    // 格式化为年\r\n    currentDate = year;\r\n  }\r\n  return currentDate;\r\n}\r\n\r\n/**\r\n * 计算前一天的函数\r\n * @param {*} obj\r\n * @returns\r\n */\r\nexport function getYesterday() {\r\n  var time = new Date().getTime(); //当前的毫秒数\r\n  var oneDay = 1000 * 60 * 60 * 24; //一天的毫秒数\r\n  var yesterdayTime = time - oneDay; // 昨天的毫秒数\r\n  var yesterday = new Date(yesterdayTime); // 昨天的中国标准时间\r\n  return yesterday;\r\n}\r\n\r\n/**\r\n * 生成一个带参数的url\r\n */\r\nexport function createUrl(obj) {\r\n  var length = obj && obj.length,\r\n    idx = 0,\r\n    url = obj.url + \"?\";\r\n  for (var key in obj) {\r\n    if (key != \"url\" && obj[key] !== null) {\r\n      url += key + \"=\" + encodeURIComponent(obj[key]) + \"&\";\r\n    }\r\n  }\r\n  var result = \"\";\r\n  if (url.lastIndexOf(\"&\") > -1) {\r\n    result = url.substring(0, url.lastIndexOf(\"&\"));\r\n  }\r\n  if (url.lastIndexOf(\"?\") > -1) {\r\n    result = url.substring(0, url.lastIndexOf(\"?\"));\r\n  }\r\n  return result;\r\n}\r\n","<template>\r\n  <div class=\"partner-company\">\r\n    <el-container>\r\n      <el-header class=\"header\">\r\n        <!-- 搜索表单 start -->\r\n        <el-form :inline=\"true\" :model=\"searchValidateForm\" ref=\"searchValidateForm\" label-width=\"100px\" class=\"search-validate-form\" :rules=\"searchValidateFormRules\">\r\n          <!-- 请选择公司 start -->\r\n          <el-form-item label=\"\" prop=\"companyId\">\r\n            <el-select v-model=\"searchValidateForm.companyId\" filterable placeholder=\"请选择公司\" @change=\"onChangeSearchCompany\" clearable>\r\n              <el-option v-for=\"(item, index) in searchCompanyOptions\" :key=\"index\" :label=\"item.COMPANY_NAME\" :value=\"item.COMPANY_ID\">\r\n              </el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          <!-- 请选择公司 end -->\r\n\r\n          <!-- 请选择景区 start -->\r\n          <el-form-item label=\"\" prop=\"spotId\">\r\n            <el-select v-model=\"searchValidateForm.spotId\" filterable placeholder=\"请选择景区\" @change=\"onChangeSearchSpot\" clearable>\r\n              <el-option v-for=\"(item, index) in searchScenicOptions\" :key=\"index\" :label=\"item.SCENIC_SPOT_NAME\" :value=\"item.SCENIC_SPOT_ID\">\r\n              </el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          <!-- 请选择景区 end -->\r\n\r\n          <!-- 请选择统计方式 start -->\r\n          <el-form-item label=\"\" prop=\"type\">\r\n            <el-select v-model=\"searchValidateForm.type\" filterable placeholder=\"请选择统计方式\" @change=\"onChangeType\">\r\n              <el-option v-for=\"(item, index) in typeOptions\" :key=\"index\" :label=\"item.label\" :value=\"item.value\">\r\n              </el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          <!-- 请选择统计方式 end -->\r\n\r\n          <!-- 请选择景区运营状态 start -->\r\n          <el-form-item label=\"\" prop=\"status\">\r\n            <el-select v-model=\"searchValidateForm.status\" filterable placeholder=\"请选择景区运营状态\" clearable>\r\n              <el-option v-for=\"(item, index) in statusOptions\" :key=\"index\" :label=\"item.label\" :value=\"item.value\">\r\n              </el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          <!-- 请选择景区运营状态 end -->\r\n\r\n          <!-- 请选择日期统计方式 start -->\r\n          <el-form-item label=\"\" prop=\"selectDateState\">\r\n            <el-select v-model=\"searchValidateForm.selectDateState\" filterable placeholder=\"请选择日期统计方式\" @change=\"onDateChange\">\r\n              <el-option v-for=\"(item, index) in dateStateOptions\" :key=\"index\" :label=\"item.label\" :value=\"item.value\">\r\n              </el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          <!-- 请选择日期统计方式 end -->\r\n\r\n          <!-- 输入起止时间 start -->\r\n          <el-form-item label=\"\" prop=\"startEndDate\" style=\"width: 350px;\">\r\n            <el-date-picker v-model=\"searchValidateForm.startEndDate\" unlink-panels :type=\"dateType\" range-separator=\"至\" start-placeholder=\"开始日期\" end-placeholder=\"结束日期\">\r\n            </el-date-picker>\r\n          </el-form-item>\r\n          <!-- 输入起止时间 end -->\r\n\r\n          <!-- 请选择时长类型 start -->\r\n          <el-form-item label=\"\" prop=\"timeType\">\r\n            <el-select v-model=\"searchValidateForm.timeType\" filterable placeholder=\"请选择时长类型\" @change=\"onChangeTimeType\" :disabled=\"disabledTimeType\">\r\n              <el-option v-for=\"(item, index) in timeTypeOptions\" :key=\"index\" :label=\"item.label\" :value=\"item.value\">\r\n              </el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          <!-- 请选择时长类型 end -->\r\n\r\n          <!-- 请输入运营时长 start -->\r\n          <el-form-item label=\"\" prop=\"totalTime\">\r\n            <el-input v-model=\"searchValidateForm.totalTime\" placeholder=\"请输入运营时长\"></el-input>\r\n          </el-form-item>\r\n          <!-- 请输入运营时长 end -->\r\n\r\n          <!-- 请输入机器人编号 start -->\r\n          <el-form-item label=\"\" prop=\"robotCode\">\r\n            <el-input v-model=\"searchValidateForm.robotCode\" placeholder=\"请输入机器人编号\" :disabled=\"disabledRobotCode\"></el-input>\r\n          </el-form-item>\r\n          <!-- 请输入机器人编号 end -->\r\n\r\n        </el-form>\r\n        <!-- 搜索表单 end -->\r\n\r\n        <!-- 操作按钮 start -->\r\n        <div>\r\n          <!-- 重置 start -->\r\n          <el-button type=\"primary\" icon=\"el-icon-refresh-right\" @click=\"onReset\">重置</el-button>\r\n          <!-- 重置 end -->\r\n\r\n          <!-- 统计报表 start -->\r\n          <el-button type=\"primary\" icon=\"el-icon-data-line\" @click=\"onStatGrossProfit('searchValidateForm')\" :disabled=\"disabledStatGrossProfit\">统计报表</el-button>\r\n          <!-- 统计报表 end -->\r\n\r\n          <!-- 导出报表 start -->\r\n          <a href=\"\" id=\"exportReport\" download=\"按时间统计运营时长\">\r\n            <el-button type=\"primary\" icon=\"el-icon-s-data\" @click=\"onExportReport\">导出报表</el-button>\r\n          </a>\r\n          <!-- 导出报表 end -->\r\n\r\n          <!-- 查询数据 start -->\r\n          <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"onSearch('searchValidateForm')\">查询数据</el-button>\r\n          <!-- 查询数据 end -->\r\n\r\n          <!-- 导出 Excel start -->\r\n          <el-button type=\"primary\" :loading=\"downloadLoading\" icon=\"el-icon-top-right\" @click=\"exportExcel\">导出数据</el-button>\r\n\r\n          <!-- 导出 Excel end -->\r\n\r\n          <!-- 新增 start -->\r\n          <!-- <el-button type=\"primary\" icon=\"el-icon-circle-plus-outline\" @click=\"onAdd\">新增</el-button> -->\r\n          <!-- 新增 end -->\r\n        </div>\r\n        <!-- 操作按钮 end -->\r\n      </el-header>\r\n      <!-- 显示表格 start -->\r\n      <div v-show=\"showTable\">\r\n        <el-main>\r\n          <!-- 表格 start -->\r\n          <el-table class=\"table\" :data=\"tableData\" style=\"width: 100%\" border v-loading=\"tableLoading\" :default-sort=\"{prop: 'totalTime', order: 'descending'}\" @sort-change=\"onSortChange\" :header-cell-style=\"{ background: '#f2f2f2',color: '#606266', height: '38px', padding: '0px' }\" :cell-style=\"{height: '38px',padding: '0'}\" max-height=\"500px\" show-summary :summary-method=\"getSummaries\" v-loadmore=\"load\" v-if=\"updateTable\">\r\n            <template v-for=\"(value, key) in tableFields\">\r\n              <el-table-column :key=\"key\" :prop=\"value\" :label=\"key\" min-width=\"130\" :fixed=\"activeFixed(value)\" :sortable=\"sortable(value)\">\r\n                <template slot-scope=\"scope\">\r\n                  <div>\r\n                    {{ tableContentValue(scope.row, value) }}\r\n                  </div>\r\n                </template>\r\n              </el-table-column>\r\n            </template>\r\n            <!-- <el-table-column label=\"操作\" min-width=\"130\" fixed=\"right\">\r\n              <template slot-scope=\"scope\">\r\n                <el-button @click.native.prevent=\"editRow(scope.$index, scope.row)\" type=\"text\" size=\"small\">\r\n                  编辑\r\n                </el-button>\r\n              </template>\r\n            </el-table-column> -->\r\n          </el-table>\r\n          <!-- 表格 end -->\r\n\r\n          <!-- 导出的表格 start -->\r\n          <!-- 此表格始终保持隐藏 -->\r\n          <el-table id=\"outTable\" class=\"table\" :data=\"exportTableData\" style=\"width: 100%; display: none\" border show-summary :summary-method=\"getSummaries\">\r\n            <el-table-column v-for=\"(value, key) in tableFields\" :key=\"key\" :prop=\"value\" :label=\"key\" min-width=\"130\" align=\"center\">\r\n              <template slot-scope=\"scope\">\r\n                <div>\r\n                  {{ tableContentValue(scope.row, value) }}\r\n                </div>\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n          <!-- 导出的表格 end -->\r\n        </el-main>\r\n        <el-footer>\r\n          <!-- 分页 start -->\r\n          <!-- <div class=\"block\">\r\n            <el-pagination background layout=\"prev, pager, next, total, sizes, jumper\" :total=\"total\" :current-page=\"currentPage\" :page-sizes=\"[10, 20, 30, 40]\" :page-size=\"pageSize\" @current-change=\"onCurrentChange\" @size-change=\"onSizeChange\">\r\n            </el-pagination>\r\n          </div> -->\r\n          <!-- 分页 end -->\r\n\r\n          <div>一共{{ total }}条数据，已加载{{ this.tableData.length }}条数据</div>\r\n        </el-footer>\r\n      </div>\r\n      <!-- 显示表格 end -->\r\n\r\n      <!-- 显示柱状图 start -->\r\n      <div v-show=\"!showTable\" class=\"my-echarts\">\r\n        <div id=\"myChart\"></div>\r\n      </div>\r\n      <!-- 显示柱状图 end -->\r\n      <div>\r\n\r\n      </div>\r\n    </el-container>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import JsonExcel from 'vue-json-excel'\r\nimport FileSaver from 'file-saver'\r\nimport XLSX from 'xlsx'\r\n\r\nimport { formatDateTime, getYesterday } from \"../utils/utils.js\"\r\nexport default {\r\n  name: 'ScenicProfitStatistic',\r\n  data() {\r\n    /**\r\n    * 公共验证函数(验证数字值)\r\n    * @params message - 提示信息\r\n    */\r\n    function checkNumberMethod(name = \"\") {\r\n      // 返回验证函数\r\n      return (rule, value, callback) => {\r\n        if (!value) {\r\n          // 如果值为空，可以回调\r\n          callback();\r\n        }\r\n\r\n        if (!Number(value)) {\r\n          callback(new Error(name + '必须为数字值'));\r\n        } else {\r\n          callback();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * 公共验证函数(验证必填数字值)\r\n    * @params message - 提示信息\r\n    */\r\n    function checkRequireNumberMethod(name = \"\") {\r\n      // 返回验证函数\r\n      return (rule, value, callback) => {\r\n        if (!value) {\r\n          return callback(new Error(name + '不能为空'));\r\n        }\r\n\r\n        if (!Number(value)) {\r\n          callback(new Error(name + '必须为数字值'));\r\n        } else {\r\n          callback();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * 公共验证函数(验证必填值)\r\n    * @params message - 提示信息\r\n    */\r\n    function checkRequireMethod(name = \"\") {\r\n      // 返回验证函数\r\n      return (rule, value, callback) => {\r\n        if (!value) {\r\n          return callback(new Error(name + '不能为空'));\r\n        } else {\r\n          callback();\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      showTable: true, // 是否显示表格\r\n      feeInput: '', // 请输入手续费\r\n      taxInput: '', // 请输入税点\r\n      searchFeeInput: \"\", // 搜索的手续费\r\n      searchTaxInput: \"\", // 搜索的税点\r\n      tableFields: { //导出Excel表格的表头设置\r\n        \"时间\": \"checkDate\",\r\n        \"景区名称\": \"spotName\",\r\n        // \"机器人编号\": \"robotCode\",\r\n        // \"机器人型号\": \"机器人型号字段\",\r\n        \"运营时长/小时\": \"totalTime\",\r\n        \"同比\": \"tb\",\r\n        \"环比\": \"hb\",\r\n        \"机器利用率\": \"lyl\",\r\n        \"平均单台运营时长/小时\": \"avgsc\",\r\n        // \"运营模式\": \"运营模式字段\",\r\n      },\r\n      tableData: [], // 表格数据\r\n\r\n      searchTableFields: {\r\n        \"时间\": \"checkDate\",\r\n        \"景区名称\": \"spotName\",\r\n        // \"机器人编号\": \"robotCode\",\r\n        // \"机器人型号\": \"机器人型号字段\",\r\n        \"运营时长/小时\": \"totalTime\",\r\n        \"同比\": \"tb\",\r\n        \"环比\": \"hb\",\r\n        \"机器利用率\": \"lyl\",\r\n        \"平均单台运营时长/小时\": \"avgsc\",\r\n        // \"运营模式\": \"运营模式字段\",\r\n      }, // 搜索后字段数据\r\n\r\n      tableLoading: false,\r\n\r\n      searchCompanyOptions: [], // 公司选项\r\n      searchScenicOptions: [], // 景区选项\r\n      dateStateOptions: [{\r\n        value: '1',\r\n        label: '按日查询'\r\n      }, {\r\n        value: '2',\r\n        label: '按月查询'\r\n      }, {\r\n        value: '3',\r\n        label: '按年查询'\r\n      }], // 日期统计方式选项\r\n      typeOptions: [{\r\n        value: '1',\r\n        label: '按景区统计'\r\n      }, {\r\n        value: '2',\r\n        label: '按机器人统计'\r\n      }], // 统计方式选项\r\n      statusOptions: [{\r\n        value: '1',\r\n        label: '已运营景区'\r\n      }, {\r\n        value: '2',\r\n        label: '测试景区'\r\n      }, {\r\n        value: '3',\r\n        label: '预运营景区'\r\n      }], // 运营状态选项\r\n      timeTypeOptions: [{\r\n        value: '1',\r\n        label: '运营时长'\r\n      }, {\r\n        value: '2',\r\n        label: '平均单台运营时长'\r\n      }], // 时长类型选项\r\n\r\n      exportTableData: [], // 导出的全部表格数据\r\n      downloadLoading: false, // 导出excel按钮的加载动画\r\n\r\n      currentPage: 1, // 当前页数,\r\n      pageSize: 15, // 每页显示条数\r\n\r\n      dialogVisible: false, // 是否显示编辑dialog对话框\r\n\r\n      dialogState: \"\", // dialog是新增还是编辑表单，新增为'add'，编辑为'edit'\r\n\r\n      dateType: \"daterange\", // 日期类型（月，日，年）\r\n      valueFormat: \"yyyy-MM-dd\", // 日期格式\r\n\r\n      searchValidateForm: {\r\n        companyId: \"\", // 公司id\r\n        spotId: \"\", // 景区id\r\n        type: \"1\", // 统计方式\r\n        status: \"1\", // 景区运营状态\r\n        selectDateState: \"1\", // 日期统计方式（日，月，年）\r\n        startEndDate: [\r\n          getYesterday(),\r\n          getYesterday()\r\n        ], // 起止日期\r\n        timeType: \"1\", // 时长类型\r\n        totalTime: \"\", // 运营时长\r\n        robotCode: \"\", // 机器人编号\r\n      }, // 搜索表单验证对象\r\n      searchVF: {\r\n        companyId: \"\", // 公司id\r\n        spotId: \"\", // 景区id\r\n        type: \"1\", // 统计方式\r\n        status: \"1\", // 景区运营状态\r\n        selectDateState: \"1\", // 日期统计方式（日，月，年）\r\n        startEndDate: [\r\n          getYesterday(),\r\n          getYesterday()\r\n        ], // 起止日期\r\n        timeType: \"1\", // 时长类型\r\n        totalTime: \"\", // 运营时长\r\n        robotCode: \"\", // 机器人编号\r\n      }, // 提交表单验证对象\r\n      searchVFEcharts: {\r\n        companyId: \"\", // 公司id\r\n        spotId: \"\", // 景区id\r\n        type: \"1\", // 统计方式\r\n        status: \"1\", // 景区运营状态\r\n        selectDateState: \"1\", // 日期统计方式（日，月，年）\r\n        startEndDate: [\r\n          getYesterday(),\r\n          getYesterday()\r\n        ], // 起止日期\r\n        timeType: \"1\", // 时长类型\r\n        totalTime: \"\", // 运营时长\r\n        robotCode: \"\", // 机器人编号\r\n      }, // 统计报表表单验证对象\r\n      validateForm: {}, // 表单验证对象\r\n\r\n      companys: [], // 公司列表\r\n      companyState: '', // 当前请选择公司\r\n\r\n      scenics: [], // 景区列表\r\n      scenicState: '', // 当前请选择景区\r\n\r\n      timeChartData: [], // 多时间多景区列表数据\r\n\r\n      total: 0, // 总条数\r\n      typeTotalTime: 0, // 总运营时长\r\n\r\n      order: \"totalTime desc\", // 表格排序\r\n      echartsOrder: null, // echarts图表排序\r\n\r\n      myChart: null, // 柱状图echarts实例\r\n      option: {}, // 柱状图optino\r\n\r\n      disabledStatGrossProfit: false, // 是否禁用统计报表功能\r\n      disabledTimeType: false, // 是否禁用时长类型选择框功能\r\n      disabledRobotCode: true, // 是否禁用机器人编号输入框\r\n\r\n      updateTable: true, // 是否显示表格\r\n\r\n      // 搜索表单规则\r\n      searchValidateFormRules: {\r\n        // 运营时长\r\n        totalTime: [\r\n          { validator: checkNumberMethod('运营时长'), required: true, trigger: ['blur', 'change'] }\r\n        ],\r\n      },\r\n\r\n      // 提交表单验证\r\n      validateFormRules: {\r\n\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    // this.login()\r\n    this.getValidateForm()\r\n    // this.initTableData()\r\n    this.loadTableData()\r\n    this.initEchartsData()\r\n    this.getCompanyList()\r\n    this.getScenicList()\r\n    this.getTimeChart()\r\n  },\r\n  mounted() {\r\n    this.drawEcharts()\r\n  },\r\n  methods: {\r\n    // 获取表单验证对象\r\n    getValidateForm() {\r\n      var validateForm = {}\r\n      for (var item in this.tableFields) {\r\n        validateForm[this.tableFields[item]] = \"\"\r\n      }\r\n      this.validateForm = validateForm\r\n      console.log(this.validateForm);\r\n    },\r\n\r\n    // 登录(必须)\r\n    async login() {\r\n      const { data: res } = await this.$http.post(\"/loginSystem?username=lijiazhao&password=lijiazhao\")\r\n    },\r\n\r\n    /**\r\n     * 更新表格的方法\r\n     */\r\n    updateTableMethode() {\r\n      this.updateTable = false;\r\n      this.$nextTick(() => {\r\n        this.updateTable = true;\r\n      })\r\n    },\r\n\r\n    /**\r\n     * 初始化表格数据\r\n     */\r\n    async initTableData() {\r\n      var companyId = this.searchVF.companyId\r\n      if (companyId == \"\" || !companyId) {\r\n        companyId = null\r\n      }\r\n\r\n      var spotId = this.searchVF.spotId\r\n      if (spotId == \"\" || !spotId) {\r\n        spotId = null\r\n      }\r\n\r\n      var type = this.searchVF.type\r\n      if (type == \"\" || !type) {\r\n        type = null\r\n      }\r\n\r\n      var status = this.searchVF.status\r\n      if (status == \"\" || !status) {\r\n        status = null\r\n      }\r\n\r\n      var selectDateState = this.searchVF.selectDateState\r\n      if (selectDateState == \"\" || !selectDateState) {\r\n        selectDateState = null\r\n      }\r\n\r\n      var startEndDate = this.searchVF.startEndDate\r\n      var startDate, endDate\r\n      if (startEndDate == \"\" || !startEndDate) {\r\n        // 因为数据量太大，查的太慢，所以默认传入当前月\r\n        // startDate = formatMonth()\r\n        // endDate = formatMonth()\r\n        startDate = null\r\n        endDate = null\r\n      } else {\r\n        startDate = formatDateTime(this.searchVF.startEndDate[0], this.searchVF.selectDateState)\r\n        endDate = formatDateTime(this.searchVF.startEndDate[1], this.searchVF.selectDateState)\r\n      }\r\n\r\n      var timeType = this.searchVF.timeType\r\n      if (timeType == \"\" || !timeType) {\r\n        timeType = null\r\n      }\r\n\r\n      var totalTime = this.searchVF.totalTime\r\n      if (totalTime == \"\" || !totalTime) {\r\n        totalTime = null\r\n      }\r\n\r\n      var robotCode = this.searchVF.robotCode\r\n      if (robotCode == \"\" || !robotCode) {\r\n        robotCode = null\r\n      }\r\n\r\n      this.currentPage = 1 // 点击搜索后将当前页数重置为第一页\r\n\r\n      var params = {\r\n        companyId: companyId,\r\n        spotId: spotId,\r\n        type: type,\r\n        status: status,\r\n        dateType: selectDateState, // 日期类型\r\n        startDate: startDate,\r\n        endDate: endDate,\r\n        timeType: timeType,\r\n        totalTime: totalTime,\r\n        robotCode: robotCode,\r\n        order: this.order, // 排序\r\n        pageNum: (this.currentPage - 1) * this.pageSize, // 页码\r\n        pageSize: this.pageSize // 每页条数\r\n      }\r\n\r\n      this.tableLoading = true\r\n      const { data: res } = await this.$http.get(\"/system/robot_time_statistics/timeList\", {\r\n        params: params\r\n      })\r\n      // console.log(res);\r\n      if (res.state == \"200\") {\r\n        // 刷新表格组件是关键\r\n        this.updateTableMethode()\r\n        this.currentPage++ // 将页数+1，表示下一页为第2页\r\n        this.tableData = res.data\r\n\r\n        var type = JSON.parse(res.type)\r\n        this.total = type.count\r\n        this.typeTotalTime = type.totalTime\r\n\r\n        this.tableLoading = false\r\n      }\r\n\r\n      return res\r\n    },\r\n\r\n    /**\r\n     * 无限滚动加载数据\r\n     */\r\n    async loadTableData() {\r\n      var companyId = this.searchVF.companyId\r\n      if (companyId == \"\" || !companyId) {\r\n        companyId = null\r\n      }\r\n\r\n      var spotId = this.searchVF.spotId\r\n      if (spotId == \"\" || !spotId) {\r\n        spotId = null\r\n      }\r\n\r\n      var type = this.searchVF.type\r\n      if (type == \"\" || !type) {\r\n        type = null\r\n      }\r\n\r\n      var status = this.searchVF.status\r\n      if (status == \"\" || !status) {\r\n        status = null\r\n      }\r\n\r\n      var selectDateState = this.searchVF.selectDateState\r\n      if (selectDateState == \"\" || !selectDateState) {\r\n        selectDateState = null\r\n      }\r\n\r\n      var startEndDate = this.searchVF.startEndDate\r\n      var startDate, endDate\r\n      if (startEndDate == \"\" || !startEndDate) {\r\n        // 因为数据量太大，查的太慢，所以默认传入当前月\r\n        // startDate = formatMonth()\r\n        // endDate = formatMonth()\r\n        startDate = null\r\n        endDate = null\r\n      } else {\r\n        startDate = formatDateTime(this.searchVF.startEndDate[0], this.searchVF.selectDateState)\r\n        endDate = formatDateTime(this.searchVF.startEndDate[1], this.searchVF.selectDateState)\r\n      }\r\n\r\n      var timeType = this.searchVF.timeType\r\n      if (timeType == \"\" || !timeType) {\r\n        timeType = null\r\n      }\r\n\r\n      var totalTime = this.searchVF.totalTime\r\n      if (totalTime == \"\" || !totalTime) {\r\n        totalTime = null\r\n      }\r\n\r\n      var robotCode = this.searchVF.robotCode\r\n      if (robotCode == \"\" || !robotCode) {\r\n        robotCode = null\r\n      }\r\n\r\n      var params = {}\r\n      params = {\r\n        companyId: companyId,\r\n        spotId: spotId,\r\n        type: type,\r\n        status: status,\r\n        dateType: selectDateState, // 日期类型\r\n        startDate: startDate,\r\n        endDate: endDate,\r\n        timeType: timeType,\r\n        totalTime: totalTime,\r\n        robotCode: robotCode,\r\n        order: this.order, // 排序\r\n        pageNum: (this.currentPage - 1) * this.pageSize, // 页码\r\n        pageSize: this.pageSize // 每页条数\r\n      }\r\n\r\n      if (this.tableData.length == this.total) {\r\n        this.$message({\r\n          type: \"info\",\r\n          message: \"到底啦！\",\r\n          offset: 100,\r\n          center: true,\r\n          duration: 1000,\r\n        })\r\n        return\r\n      }\r\n\r\n      this.tableLoading = true\r\n      const { data: res } = await this.$http.get(\"/system/robot_time_statistics/timeList\", {\r\n        params: params\r\n      })\r\n      // console.log(res);\r\n      if (res.state == \"200\") {\r\n        // console.log(res.data);\r\n        if (res.data.length > 0) {\r\n          this.currentPage++\r\n          this.tableData.push(...res.data)\r\n          var type = JSON.parse(res.type)\r\n          this.total = type.count\r\n          this.typeTotalTime = type.totalTime\r\n        } else {\r\n          this.$message({\r\n            type: \"info\",\r\n            message: \"到底啦！\",\r\n            offset: 100,\r\n            center: true,\r\n            duration: 1000,\r\n          })\r\n        }\r\n\r\n        this.tableLoading = false\r\n      }\r\n\r\n      return res\r\n    },\r\n\r\n    /**\r\n     * 初始化Echarts数据\r\n     */\r\n    async initEchartsData() {\r\n      var companyId = this.searchVFEcharts.companyId\r\n      if (companyId == \"\" || !companyId) {\r\n        companyId = null\r\n      }\r\n\r\n      var spotId = this.searchVFEcharts.spotId\r\n      if (spotId == \"\" || !spotId) {\r\n        spotId = null\r\n      }\r\n\r\n      var type = this.searchVFEcharts.type\r\n      if (type == \"\" || !type) {\r\n        type = null\r\n      }\r\n\r\n      var status = this.searchVFEcharts.status\r\n      if (status == \"\" || !status) {\r\n        status = null\r\n      }\r\n\r\n      var selectDateState = this.searchVFEcharts.selectDateState\r\n      if (selectDateState == \"\" || !selectDateState) {\r\n        selectDateState = null\r\n      }\r\n\r\n      var startEndDate = this.searchVFEcharts.startEndDate\r\n      var startDate, endDate\r\n      if (startEndDate == \"\" || !startEndDate) {\r\n        // 因为数据量太大，查的太慢，所以默认传入当前月\r\n        // startDate = formatMonth()\r\n        // endDate = formatMonth()\r\n        startDate = null\r\n        endDate = null\r\n      } else {\r\n        startDate = formatDateTime(this.searchVFEcharts.startEndDate[0], this.searchVFEcharts.selectDateState)\r\n        endDate = formatDateTime(this.searchVFEcharts.startEndDate[1], this.searchVFEcharts.selectDateState)\r\n\r\n        console.log(startDate, endDate);\r\n      }\r\n\r\n      var timeType = this.searchVFEcharts.timeType\r\n      if (timeType == \"\" || !timeType) {\r\n        timeType = null\r\n      }\r\n\r\n      var totalTime = this.searchVFEcharts.totalTime\r\n      if (totalTime == \"\" || !totalTime) {\r\n        totalTime = null\r\n      }\r\n\r\n      var robotCode = this.searchVFEcharts.robotCode\r\n      if (robotCode == \"\" || !robotCode) {\r\n        robotCode = null\r\n      }\r\n\r\n      // 搜索的是否是一个月(注意需要将Date对象转换为字符串进行比较)\r\n      // console.log(this.searchVFEcharts.startEndDate);\r\n      var isSingleMonth = true\r\n      if (startDate == endDate) {\r\n        isSingleMonth = true\r\n      } else {\r\n        isSingleMonth = false\r\n      }\r\n      console.log(isSingleMonth);\r\n\r\n      // 搜索的是否是一个景区\r\n      var isSingleSpot = false\r\n      if (!!this.searchVFEcharts.spotId) {\r\n        isSingleSpot = true\r\n      } else {\r\n        isSingleSpot = false\r\n      }\r\n      console.log(isSingleSpot);\r\n\r\n      if (isSingleMonth && !isSingleSpot) {\r\n        if (this.searchVFEcharts.timeType == \"1\") {\r\n          // 按运营时长倒序排序\r\n          this.echartsOrder = \"totalTime desc\"\r\n        } else if (this.searchVFEcharts.timeType == \"2\") {\r\n          // 按平均运营时长倒序排序\r\n          this.echartsOrder = \"avgsc desc\"\r\n        }\r\n      } else {\r\n        // 按月份升序排序\r\n        this.echartsOrder = \"checkDate asc\"\r\n      }\r\n\r\n      const { data: res } = await this.$http.get(\"/system/robot_time_statistics/timeList\", {\r\n        params: {\r\n          companyId: companyId,\r\n          spotId: spotId,\r\n          type: type,\r\n          status: status,\r\n          dateType: selectDateState, // 日期类型\r\n          startDate: startDate,\r\n          endDate: endDate,\r\n          timeType: timeType,\r\n          totalTime: totalTime,\r\n          robotCode: robotCode,\r\n          order: this.echartsOrder, // 排序\r\n        }\r\n      })\r\n      // console.log(res);\r\n      if (res.state == \"200\") {\r\n\r\n        // 隐藏echart的loadnig效果\r\n        this.myChart.hideLoading();\r\n\r\n        var resultData = res.data.concat()\r\n        // console.log(resultData);\r\n\r\n        // 当前搜索到的景区名称列表\r\n        var spotNameList = []\r\n        // 当前搜索到的运营时长列表\r\n        var totalTimeList = []\r\n        // 当前搜索到的平均单台运营时长列表\r\n        var avgscList = []\r\n        // 当前搜索到的时间列表\r\n        var checkDateList = []\r\n        // 当前搜索到的同比列表\r\n        var tbList = []\r\n        // 当前搜索到的环比列表\r\n        var hbList = []\r\n        // 当前搜索到的在线订单数列表\r\n        var jxzList = []\r\n\r\n        // 当前日/月/年合计运营总时长列表\r\n        var totalTimeList2 = []\r\n        // 当前日/月/年合计平均单台运营总时长列表\r\n        var avgscList2 = []\r\n        // 所有的日份/月份/年份列表\r\n        var checkDateList2 = []\r\n        // 所有的同比列表\r\n        var tbList2 = []\r\n        // 所有的环比列表\r\n        var hbList2 = []\r\n        // 所有的在线订单数列表\r\n        var jxzList2 = []\r\n        var checkDate = \"\" // 保存的时间，通过这个变量来判断的是否push运营总时长进入列表中\r\n        var totalTimes = \"初始totalTimes\" // 运营总时长\r\n        var avgscs = \"初始avgscs\" // 平均单台运营总时长\r\n        var tbs = \"初始tb\"\r\n        var hbs = \"初始hb\"\r\n        var jxzs = \"初始jxzs\" // 在线订单总数\r\n        resultData.forEach((item) => {\r\n          spotNameList.push(item.spotName)\r\n          totalTimeList.push(item.totalTime)\r\n          avgscList.push(item.avgsc)\r\n          checkDateList.push(item.checkDate)\r\n          tbList.push(item.tb)\r\n          hbList.push(item.hb)\r\n          jxzList.push(item.jxz)\r\n\r\n          // 如果当前遍历到的时间不是保存的时间，则将保存的时间设置为当前遍历到的时间\r\n          if (item.checkDate !== checkDate) {\r\n            if (totalTimes !== \"初始totalTimes\") {\r\n              // 四舍五入 totalTimes，并保留两位小数\r\n              totalTimeList2.push(Number(totalTimes).toFixed(2))\r\n            }\r\n            if (avgscs !== \"初始avgscs\") {\r\n              // 四舍五入 avgscs\r\n              // console.log(avgscs);\r\n              avgscList2.push(Number(avgscs).toFixed(2))\r\n            }\r\n            if (tbs !== \"初始tb\") {\r\n              // 四舍五入 tbs\r\n              tbList2.push(Number(tbs).toFixed(2))\r\n            }\r\n            if (hbs !== \"初始hb\") {\r\n              // 四舍五入 hbs\r\n              hbList2.push(Number(hbs).toFixed(2))\r\n            }\r\n            if (jxzs !== \"初始jxzs\") {\r\n              jxzList2.push(Number(jxzs))\r\n            }\r\n\r\n            checkDate = item.checkDate\r\n            checkDateList2.push(checkDate)\r\n            // 重置totalTimes\r\n            totalTimes = item.totalTime\r\n            avgscs = item.avgsc\r\n            tbs = item.tb\r\n            hbs = item.hb\r\n            jxzs = item.jxz\r\n          } else {\r\n            // 否则就累加运营时长\r\n            totalTimes += item.totalTime\r\n            avgscs += item.avgsc\r\n            tbs += item.tb\r\n            hbs += item.hb\r\n            jxzs += item.jxz\r\n          }\r\n        })\r\n        // 最后记得吧最后的 totalTimes 再push进去\r\n        totalTimeList2.push(Number(totalTimes).toFixed(2))\r\n        avgscList2.push(Number(avgscs).toFixed(2))\r\n        tbList2.push(Number(tbs).toFixed(2))\r\n        hbList2.push(Number(hbs).toFixed(2))\r\n        jxzList2.push(Number(jxzs))\r\n        // console.log(\"totalTimes:\", totalTimes);\r\n        // console.log(\"totalTimeList2:\", totalTimeList2);\r\n        console.log(\"avgscList2:\", avgscList2);\r\n        // console.log(\"checkDateList2:\", checkDateList2);\r\n\r\n        // 设置 option\r\n        var name = \"\" // 运营时长or平均单台运营时长\r\n        if (this.searchVFEcharts.timeType == \"1\") {\r\n          // 选择的是运营时长\r\n          name = \"运营时长/小时\"\r\n\r\n          // 如果是一个月对应多个景区\r\n          if (isSingleMonth && !isSingleSpot) {\r\n            // 设置x轴字段名称\r\n            this.option.xAxis[0].data = spotNameList\r\n            // 设置y轴数据\r\n            this.option.series[0].data = totalTimeList\r\n\r\n            // console.log(jxzList);\r\n            // 设置柱状图顶部自定义数值（在线订单数）\r\n            this.option.series[0].itemStyle.normal.label.formatter = (params) => { // 自定义数值\r\n              // console.log(params);\r\n              var result = \"\"\r\n              result = jxzList[params.dataIndex]\r\n              return result\r\n            }\r\n\r\n            this.option.series[1].data = tbList\r\n\r\n            // 如果当前选择的是按年查询\r\n            if (this.searchValidateForm.selectDateState == \"3\") {\r\n              this.option.legend.data = [\"运营时长/小时\", \"同比/小时\"]\r\n              this.option.series[2].data = []\r\n            } else {\r\n              this.option.legend.data = [\"运营时长/小时\", \"同比/%\", \"环比/%\"]\r\n              this.option.series[2].data = hbList\r\n            }\r\n\r\n            // 如果x轴数据小于等于20条，则将 echarts 中的 dataZoom 拉满\r\n            if (spotNameList && spotNameList.length <= 20) {\r\n              this.option.dataZoom[0].end = 100\r\n            } else {\r\n              this.option.dataZoom[0].end = 30\r\n            }\r\n          }\r\n          // 如果是一个月对应一个景区\r\n          else if (isSingleMonth && isSingleSpot) {\r\n            this.option.xAxis[0].data = checkDateList\r\n            this.option.series[0].data = totalTimeList\r\n\r\n            // 设置柱状图顶部自定义数值（在线订单数）\r\n            this.option.series[0].itemStyle.normal.label.formatter = (params) => { // 自定义数值\r\n              // console.log(params);\r\n              var result = \"\"\r\n              result = jxzList[params.dataIndex]\r\n              return result\r\n            }\r\n\r\n            this.option.series[1].data = tbList\r\n\r\n            // 如果当前选择的是按年查询\r\n            if (this.searchValidateForm.selectDateState == \"3\") {\r\n              this.option.legend.data = [\"运营时长/小时\", \"同比/%\"]\r\n              this.option.series[2].data = []\r\n            } else {\r\n              this.option.legend.data = [\"运营时长/小时\", \"同比/%\", \"环比/%\"]\r\n              this.option.series[2].data = hbList\r\n            }\r\n\r\n            // 如果x轴数据小于等于20条，则将 echarts 中的 dataZoom 拉满\r\n            if (checkDateList && checkDateList.length <= 20) {\r\n              this.option.dataZoom[0].end = 100\r\n            } else {\r\n              this.option.dataZoom[0].end = 30\r\n            }\r\n          }\r\n          // 如果是N个月对应一个景区\r\n          else if (!isSingleMonth && isSingleSpot) {\r\n            this.option.xAxis[0].data = checkDateList\r\n            this.option.series[0].data = totalTimeList\r\n\r\n            // 设置柱状图顶部自定义数值（在线订单数）\r\n            this.option.series[0].itemStyle.normal.label.formatter = (params) => { // 自定义数值\r\n              // console.log(params);\r\n              var result = \"\"\r\n              result = jxzList[params.dataIndex]\r\n              return result\r\n            }\r\n\r\n            this.option.series[1].data = tbList\r\n\r\n            // 如果当前选择的是按年查询\r\n            if (this.searchValidateForm.selectDateState == \"3\") {\r\n              this.option.legend.data = [\"运营时长/小时\", \"同比/%\"]\r\n              this.option.series[2].data = []\r\n            } else {\r\n              this.option.legend.data = [\"运营时长/小时\", \"同比/%\", \"环比/%\"]\r\n              this.option.series[2].data = hbList\r\n            }\r\n\r\n            // 如果x轴数据小于等于20条，则将 echarts 中的 dataZoom 拉满\r\n            if (checkDateList && checkDateList.length <= 20) {\r\n              this.option.dataZoom[0].end = 100\r\n            } else {\r\n              this.option.dataZoom[0].end = 30\r\n            }\r\n          }\r\n          // 如果是N个月对应N个景区\r\n          else if (!isSingleMonth && !isSingleSpot) {\r\n            this.option.xAxis[0].data = checkDateList2\r\n            this.option.series[0].data = totalTimeList2\r\n\r\n            // console.log(jxzList2);\r\n            // 设置柱状图顶部自定义数值（在线订单数）\r\n            this.option.series[0].itemStyle.normal.label.formatter = (params) => { // 自定义数值\r\n              // console.log(params);\r\n              // console.log(params.dataIndex);\r\n              var result = \"\"\r\n              result = jxzList2[params.dataIndex]\r\n              return result\r\n            }\r\n\r\n            // this.option.series[1].data = tbList2\r\n\r\n            // // 如果当前选择的是按年查询\r\n            // if (this.searchValidateForm.selectDateState == \"3\") {\r\n            //   this.option.legend.data = [\"运营时长/小时\", \"同比/%\"]\r\n            //   this.option.series[2].data = []\r\n            // } else {\r\n            //   this.option.legend.data = [\"运营时长/小时\", \"同比/%\", \"环比/%\"]\r\n            //   this.option.series[2].data = hbList2\r\n            // }\r\n\r\n            var tbData = []\r\n            var hbData = []\r\n            this.timeChartData.forEach((item) => {\r\n              tbData.push(item.tb)\r\n              hbData.push(item.hb)\r\n            })\r\n            this.option.series[1].data = tbData\r\n            // 如果当前选择的是按年查询\r\n            if (this.searchValidateForm.selectDateState == \"3\") {\r\n              this.option.legend.data = [\"运营时长/小时\", \"同比/%\"]\r\n              this.option.series[2].data = []\r\n            } else {\r\n              this.option.legend.data = [\"运营时长/小时\", \"同比/%\", \"环比/%\"]\r\n              this.option.series[2].data = hbData\r\n            }\r\n\r\n            // 如果x轴数据小于等于20条，则将 echarts 中的 dataZoom 拉满\r\n            if (checkDateList2 && checkDateList2.length <= 20) {\r\n              this.option.dataZoom[0].end = 100\r\n            } else {\r\n              this.option.dataZoom[0].end = 30\r\n            }\r\n          }\r\n        } else if (this.searchVFEcharts.timeType == \"2\") {\r\n          // 选择的是平均单台运营时长\r\n          name = \"平均单台运营时长\"\r\n\r\n          // 如果是一个月对应多个景区\r\n          if (isSingleMonth && !isSingleSpot) {\r\n            // 设置x轴字段名称\r\n            this.option.xAxis[0].data = spotNameList\r\n            // 设置y轴数据\r\n            this.option.series[0].data = avgscList\r\n\r\n            // 设置柱状图顶部自定义数值（在线订单数）\r\n            this.option.series[0].itemStyle.normal.label.formatter = (params) => { // 自定义数值\r\n              var result = \"\"\r\n              result = jxzList[params.dataIndex]\r\n              return result\r\n            }\r\n\r\n            this.option.series[1].data = tbList\r\n\r\n            // 如果当前选择的是按年查询\r\n            if (this.searchValidateForm.selectDateState == \"3\") {\r\n              this.option.legend.data = [\"运营时长/小时\", \"同比/%\"]\r\n              this.option.series[2].data = []\r\n            } else {\r\n              this.option.legend.data = [\"运营时长/小时\", \"同比/%\", \"环比/%\"]\r\n              this.option.series[2].data = hbList\r\n            }\r\n\r\n            // 如果x轴数据小于等于20条，则将 echarts 中的 dataZoom 拉满\r\n            if (spotNameList && spotNameList.length <= 20) {\r\n              this.option.dataZoom[0].end = 100\r\n            } else {\r\n              this.option.dataZoom[0].end = 30\r\n            }\r\n          }\r\n          // 如果是一个月对应一个景区\r\n          else if (isSingleMonth && isSingleSpot) {\r\n            this.option.xAxis[0].data = checkDateList\r\n            this.option.series[0].data = avgscList\r\n\r\n            // 设置柱状图顶部自定义数值（在线订单数）\r\n            this.option.series[0].itemStyle.normal.label.formatter = (params) => { // 自定义数值\r\n              var result = \"\"\r\n              result = jxzList[params.dataIndex]\r\n              return result\r\n            }\r\n\r\n            this.option.series[1].data = tbList\r\n\r\n            // 如果当前选择的是按年查询\r\n            if (this.searchValidateForm.selectDateState == \"3\") {\r\n              this.option.legend.data = [\"运营时长/小时\", \"同比/%\"]\r\n              this.option.series[2].data = []\r\n            } else {\r\n              this.option.legend.data = [\"运营时长/小时\", \"同比/%\", \"环比/%\"]\r\n              this.option.series[2].data = hbList\r\n            }\r\n\r\n            // 如果x轴数据小于等于20条，则将 echarts 中的 dataZoom 拉满\r\n            if (checkDateList && checkDateList.length <= 20) {\r\n              this.option.dataZoom[0].end = 100\r\n            } else {\r\n              this.option.dataZoom[0].end = 30\r\n            }\r\n          }\r\n          // 如果是N个月对应一个景区\r\n          else if (!isSingleMonth && isSingleSpot) {\r\n            this.option.xAxis[0].data = checkDateList\r\n            this.option.series[0].data = avgscList\r\n\r\n            // 设置柱状图顶部自定义数值（在线订单数）\r\n            this.option.series[0].itemStyle.normal.label.formatter = (params) => { // 自定义数值\r\n              var result = \"\"\r\n              result = jxzList[params.dataIndex]\r\n              return result\r\n            }\r\n\r\n            this.option.series[1].data = tbList\r\n\r\n            // 如果当前选择的是按年查询\r\n            if (this.searchValidateForm.selectDateState == \"3\") {\r\n              this.option.legend.data = [\"运营时长/小时\", \"同比/%\"]\r\n              this.option.series[2].data = []\r\n            } else {\r\n              this.option.legend.data = [\"运营时长/小时\", \"同比/%\", \"环比/%\"]\r\n              this.option.series[2].data = hbList\r\n            }\r\n\r\n            // 如果x轴数据小于等于20条，则将 echarts 中的 dataZoom 拉满\r\n            if (checkDateList && checkDateList.length <= 20) {\r\n              this.option.dataZoom[0].end = 100\r\n            } else {\r\n              this.option.dataZoom[0].end = 30\r\n            }\r\n          }\r\n          // 如果是N个月对应N个景区\r\n          else if (!isSingleMonth && !isSingleSpot) {\r\n            this.option.xAxis[0].data = checkDateList2\r\n            this.option.series[0].data = avgscList2\r\n\r\n            // 设置柱状图顶部自定义数值（在线订单数）\r\n            this.option.series[0].itemStyle.normal.label.formatter = (params) => { // 自定义数值\r\n              var result = \"\"\r\n              result = jxzList2[params.dataIndex]\r\n              return result\r\n            }\r\n\r\n            // this.option.series[1].data = tbList2\r\n\r\n            // // 如果当前选择的是按年查询\r\n            // if (this.searchValidateForm.selectDateState == \"3\") {\r\n            //   this.option.legend.data = [\"运营时长/小时\", \"同比/%\"]\r\n            //   this.option.series[2].data = []\r\n            // } else {\r\n            //   this.option.legend.data = [\"运营时长/小时\", \"同比/%\", \"环比/%\"]\r\n            //   this.option.series[2].data = hbList2\r\n            // }\r\n\r\n            var tbData = []\r\n            var hbData = []\r\n            this.timeChartData.forEach((item) => {\r\n              tbData.push(item.tb)\r\n              hbData.push(item.hb)\r\n            })\r\n            this.option.series[1].data = tbData\r\n            // 如果当前选择的是按年查询\r\n            if (this.searchValidateForm.selectDateState == \"3\") {\r\n              this.option.legend.data = [\"运营时长/小时\", \"同比/%\"]\r\n              this.option.series[2].data = []\r\n            } else {\r\n              this.option.legend.data = [\"运营时长/小时\", \"同比/%\", \"环比/%\"]\r\n              this.option.series[2].data = hbData\r\n            }\r\n\r\n            // 如果x轴数据小于等于20条，则将 echarts 中的 dataZoom 拉满\r\n            if (checkDateList2 && checkDateList2.length <= 20) {\r\n              this.option.dataZoom[0].end = 100\r\n            } else {\r\n              this.option.dataZoom[0].end = 30\r\n            }\r\n          }\r\n        }\r\n\r\n        this.option.legend.data[0] = name\r\n        this.option.series[0].name = name\r\n\r\n        this.myChart.setOption(this.option)\r\n      }\r\n\r\n      return res\r\n    },\r\n\r\n    /**\r\n     * 根据景区ID获取公司列表（搜索时公司列表）\r\n     */\r\n    async getCompanyList(spotId) {\r\n      if (!spotId) {\r\n        spotId = null\r\n      }\r\n      const { data: res } = await this.$http.get(\"/system/robot_time_statistics/companyList\", {\r\n        params: {\r\n          spotId: spotId\r\n        }\r\n      })\r\n      if (res.state == \"200\") {\r\n        this.searchCompanyOptions = res.data\r\n        return res\r\n      } else {\r\n        return\r\n      }\r\n    },\r\n\r\n    /**\r\n     * 根据公司ID获取景区列表（搜索时景区列表）\r\n     */\r\n    async getScenicList(companyId) {\r\n      if (!companyId) {\r\n        companyId = null\r\n      }\r\n      const { data: res } = await this.$http.get(\"/system/robot_time_statistics/spotList\", {\r\n        params: {\r\n          companyId: companyId\r\n        }\r\n      })\r\n      if (res.state == \"200\") {\r\n        this.searchScenicOptions = res.data\r\n        return res\r\n      } else {\r\n        return\r\n      }\r\n    },\r\n\r\n    /**\r\n     * 导出 Excel 表格的全部数据\r\n     */\r\n    async getExportTableData() {\r\n      var companyId = this.searchValidateForm.companyId\r\n      if (companyId == \"\" || !companyId) {\r\n        companyId = null\r\n      }\r\n\r\n      var spotId = this.searchValidateForm.spotId\r\n      if (spotId == \"\" || !spotId) {\r\n        spotId = null\r\n      }\r\n\r\n      var type = this.searchValidateForm.type\r\n      if (type == \"\" || !type) {\r\n        type = null\r\n      }\r\n\r\n      var status = this.searchValidateForm.status\r\n      if (status == \"\" || !status) {\r\n        status = null\r\n      }\r\n\r\n      var selectDateState = this.searchValidateForm.selectDateState\r\n      if (selectDateState == \"\" || !selectDateState) {\r\n        selectDateState = null\r\n      }\r\n\r\n      var startEndDate = this.searchValidateForm.startEndDate\r\n      var startDate, endDate\r\n      if (startEndDate == \"\" || !startEndDate) {\r\n        // 因为数据量太大，查的太慢，所以默认传入当前月\r\n        // startDate = formatMonth()\r\n        // endDate = formatMonth()\r\n        startDate = null\r\n        endDate = null\r\n      } else {\r\n        startDate = formatDateTime(this.searchValidateForm.startEndDate[0], this.searchValidateForm.selectDateState)\r\n        endDate = formatDateTime(this.searchValidateForm.startEndDate[1], this.searchValidateForm.selectDateState)\r\n      }\r\n\r\n      var timeType = this.searchValidateForm.timeType\r\n      if (timeType == \"\" || !timeType) {\r\n        timeType = null\r\n      }\r\n\r\n      var totalTime = this.searchValidateForm.totalTime\r\n      if (totalTime == \"\" || !totalTime) {\r\n        totalTime = null\r\n      }\r\n\r\n      var robotCode = this.searchValidateForm.robotCode\r\n      if (robotCode == \"\" || !robotCode) {\r\n        robotCode = null\r\n      }\r\n\r\n      const { data: res } = await this.$http.get(\"/system/robot_time_statistics/timeList\", {\r\n        params: {\r\n          companyId: companyId,\r\n          spotId: spotId,\r\n          type: type,\r\n          status: status,\r\n          dateType: selectDateState, // 日期类型\r\n          startDate: startDate,\r\n          endDate: endDate,\r\n          timeType: timeType,\r\n          totalTime: totalTime,\r\n          robotCode: robotCode,\r\n          order: this.order, // 排序\r\n        }\r\n      })\r\n      if (res.state == \"200\") {\r\n        this.exportTableData = res.data\r\n      } else {\r\n        return\r\n      }\r\n    },\r\n\r\n    /**\r\n     * 按时间统计运营时长多时间多景区报表\r\n     */\r\n    async getTimeChart() {\r\n      var selectDateState = this.searchVFEcharts.selectDateState\r\n      if (selectDateState == \"\" || !selectDateState) {\r\n        selectDateState = null\r\n      }\r\n\r\n      var startEndDate = this.searchVFEcharts.startEndDate\r\n      var startDate, endDate\r\n      if (startEndDate == \"\" || !startEndDate) {\r\n        // 因为数据量太大，查的太慢，所以默认传入当前月\r\n        // startDate = formatMonth()\r\n        // endDate = formatMonth()\r\n        startDate = null\r\n        endDate = null\r\n      } else {\r\n        startDate = formatDateTime(this.searchVFEcharts.startEndDate[0], this.searchVFEcharts.selectDateState)\r\n        endDate = formatDateTime(this.searchVFEcharts.startEndDate[1], this.searchVFEcharts.selectDateState)\r\n      }\r\n\r\n      const { data: res } = await this.$http.get(\"/system/robot_time_statistics/timeChart\", {\r\n        params: {\r\n          dateType: selectDateState,\r\n          startDate: startDate,\r\n          endDate, endDate,\r\n        }\r\n      })\r\n      this.timeChartData = res.data\r\n    },\r\n\r\n    // 日期选项值发生变化时触发\r\n    onDateChange() {\r\n      // console.log(this.searchValidateForm.selectDateState);\r\n      // 将对象转换成数组\r\n      var arr = []\r\n      for (let i in this.searchTableFields) {\r\n        let o = {};\r\n        o[i] = this.searchTableFields[i]; //即添加了key值也赋了value值 o[i] 相当于o.name 此时i为变量\r\n        arr.push(o)\r\n      }\r\n\r\n      if (this.searchValidateForm.selectDateState == \"1\") { // 按日查询\r\n        this.dateType = \"daterange\"\r\n\r\n        // 如果“环比”字段不存在\r\n        if (!this.searchTableFields.hasOwnProperty(\"环比\")) {\r\n          arr.forEach((item, index) => {\r\n            // 找到同比\r\n            if (Object.values(item)[0] == \"tb\") {\r\n              // 在同比后面添加环比\r\n              arr.splice(index + 1, 0, { \"环比\": \"hb\" })\r\n            }\r\n          })\r\n        }\r\n      } else if (this.searchValidateForm.selectDateState == \"2\") { // 按月查询\r\n        this.dateType = \"monthrange\"\r\n\r\n        // 如果“环比”字段不存在\r\n        if (!this.searchTableFields.hasOwnProperty(\"环比\")) {\r\n          arr.forEach((item, index) => {\r\n            if (Object.values(item)[0] == \"tb\") {\r\n              arr.splice(index + 1, 0, { \"环比\": \"hb\" })\r\n            }\r\n          })\r\n        }\r\n      } else if (this.searchValidateForm.selectDateState == \"3\") { // 按年查询\r\n        this.dateType = \"yearrange\"\r\n\r\n        // 如果“环比”字段存在\r\n        if (!!this.searchTableFields.hasOwnProperty(\"环比\")) {\r\n          // 删除“环比”字段\r\n          arr.forEach((item, index) => {\r\n            if (Object.values(item)[0] == \"hb\") {\r\n              arr.splice(index, 1)\r\n            }\r\n          })\r\n        }\r\n      }\r\n\r\n      // 将数组转换成对象\r\n      var result = {}\r\n      arr.forEach((item) => {\r\n        result[Object.keys(item)[0]] = Object.values(item)[0]\r\n      })\r\n      // console.log(result);\r\n      this.searchTableFields = result\r\n    },\r\n\r\n    // 表格排序触发\r\n    onSortChange({ column, prop, order }) {\r\n      console.log(column, prop, order);\r\n      if (order == \"ascending\") {\r\n        order = \"asc\"\r\n      } else if (order == \"descending\") {\r\n        order = \"desc\"\r\n      }\r\n\r\n      if (!order) {\r\n        this.order = null\r\n      } else {\r\n        this.order = `${prop} ${order}`\r\n      }\r\n      this.initTableData()\r\n    },\r\n\r\n    /**\r\n     * 画echart图表\r\n     */\r\n    drawEcharts() {\r\n      this.myChart = this.$echarts.init(document.getElementById(\"myChart\"));\r\n\r\n      this.option = {\r\n        tooltip: {\r\n          trigger: \"axis\",\r\n          axisPointer: {\r\n            type: \"cross\",\r\n            crossStyle: {\r\n              color: \"#999\",\r\n            },\r\n          },\r\n        },\r\n        toolbox: {\r\n          feature: {\r\n            dataView: { show: true, readOnly: false },\r\n            magicType: { show: true, type: [\"line\", \"bar\"] },\r\n            saveAsImage: { show: true },\r\n          },\r\n        },\r\n        legend: {\r\n          data: [\"运营时长/小时\", \"同比/%\", \"环比/%\"],\r\n          top: 0, // 把legend放到柱状图上面\r\n        },\r\n        dataZoom: [\r\n          {\r\n            type: \"inside\",\r\n            start: 0,\r\n            end: 30,\r\n          },\r\n          {\r\n            type: \"slider\",\r\n            // show: true,\r\n            // start: dataAxis.length - 6,\r\n            // end: dataAxis.length - 1,\r\n          },\r\n        ],\r\n        xAxis: [\r\n          {\r\n            type: \"category\",\r\n            data: [\"1月\", \"2月\", \"3月\", \"4月\", \"5月\", \"6月\", \"7月\", \"8月\", \"9月\", \"10月\", \"11月\", \"12月\"],\r\n            axisPointer: {\r\n              type: \"shadow\",\r\n            },\r\n          },\r\n        ],\r\n        yAxis: [\r\n          {\r\n            type: \"value\",\r\n            // name: \"小时\",\r\n            // min: 0,\r\n            // max: 70000,\r\n            // interval: 10000,\r\n            axisLabel: {\r\n              formatter: '{value} 小时'\r\n            }\r\n          },\r\n          {\r\n            type: 'value',\r\n            // name: '比率',\r\n            // min: 0,\r\n            // max: 25,\r\n            // interval: 5,\r\n            axisLabel: {\r\n              formatter: '{value} %'\r\n            }\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            name: \"运营时长/小时\",\r\n            type: \"bar\",\r\n            // barWidth: 300 / 3,\r\n            data: [],\r\n            // realtimeSort: true, // 实时动态排序\r\n            itemStyle: {\r\n              normal: {\r\n                label: {\r\n                  show: true, // 开启显示每个柱状图上的数据\r\n                  position: \"top\", // 在上方显示\r\n                  textStyle: { //数值样式\r\n                    color: 'black',\r\n                    fontSize: 16\r\n                  },\r\n                  formatter: \"\",\r\n                }\r\n              }\r\n            }\r\n          },\r\n          {\r\n            name: '同比/%',\r\n            type: 'line',\r\n            yAxisIndex: 1,\r\n            data: []\r\n          },\r\n          {\r\n            name: '环比/%',\r\n            type: 'line',\r\n            yAxisIndex: 1,\r\n            data: []\r\n          }\r\n        ],\r\n      };\r\n\r\n      this.myChart.setOption(this.option);\r\n\r\n      // 图表自适应\r\n      window.addEventListener(\"resize\", () => {\r\n        this.myChart.resize();\r\n      });\r\n    },\r\n\r\n    /**\r\n     * 查询公司名称获取列表数据\r\n     */\r\n    async getTableData() {\r\n      var startEndDateValidateFormList = []\r\n      var startEndDateVFList = []\r\n\r\n      startEndDateValidateFormList = [\r\n        formatDateTime(this.searchValidateForm.startEndDate[0], this.searchValidateForm.selectDateState),\r\n        formatDateTime(this.searchValidateForm.startEndDate[1], this.searchValidateForm.selectDateState)\r\n      ]\r\n\r\n      startEndDateVFList = [\r\n        formatDateTime(this.searchVF.startEndDate[0], this.searchVF.selectDateState),\r\n        formatDateTime(this.searchVF.startEndDate[1], this.searchVF.selectDateState)\r\n      ]\r\n\r\n      // 如果输入框中的内容等于上次搜索的内容，则直接返回\r\n      if (this.searchValidateForm.companyId == this.searchVF.companyId && this.searchValidateForm.spotId == this.searchVF.spotId && this.searchValidateForm.type == this.searchVF.type && this.searchValidateForm.status == this.searchVF.status && this.searchValidateForm.selectDateState == this.searchVF.selectDateState && startEndDateValidateFormList.toString() == startEndDateVFList.toString() && this.searchValidateForm.timeType == this.searchVF.timeType && this.searchValidateForm.totalTime == this.searchVF.totalTime && this.searchValidateForm.robotCode == this.searchVF.robotCode) {\r\n        // 隐藏echart的loadnig效果\r\n        // this.myChart.hideLoading();\r\n        return\r\n      }\r\n\r\n      // 保存当前搜索的内容\r\n      this.searchVF.companyId = this.searchValidateForm.companyId\r\n      this.searchVF.spotId = this.searchValidateForm.spotId\r\n      this.searchVF.type = this.searchValidateForm.type\r\n      this.searchVF.status = this.searchValidateForm.status\r\n      this.searchVF.selectDateState = this.searchValidateForm.selectDateState\r\n      this.searchVF.startEndDate = this.searchValidateForm.startEndDate\r\n      this.searchVF.timeType = this.searchValidateForm.timeType\r\n      this.searchVF.totalTime = this.searchValidateForm.totalTime\r\n      this.searchVF.robotCode = this.searchValidateForm.robotCode\r\n\r\n      // 否则调用接口，请求数据，为tableData重新赋值\r\n      console.log(\"调用接口\");\r\n      // var res = await this.initTableData()\r\n      var res = await this.initTableData()\r\n      // console.log(res);\r\n      if (res.state == \"200\") {\r\n        this.tableFields = this.searchTableFields\r\n      }\r\n    },\r\n\r\n    /**\r\n     * 查询公司名称获取Echarts数据\r\n     */\r\n    async getEchartsData() {\r\n      var startEndDateValidateFormList = []\r\n      var startEndDateVFEchartsList = []\r\n\r\n      startEndDateValidateFormList = [\r\n        formatDateTime(this.searchValidateForm.startEndDate[0], this.searchValidateForm.selectDateState),\r\n        formatDateTime(this.searchValidateForm.startEndDate[1], this.searchValidateForm.selectDateState)\r\n      ]\r\n\r\n      startEndDateVFEchartsList = [\r\n        formatDateTime(this.searchVFEcharts.startEndDate[0], this.searchVFEcharts.selectDateState),\r\n        formatDateTime(this.searchVFEcharts.startEndDate[1], this.searchVFEcharts.selectDateState)\r\n      ]\r\n\r\n      // 加载Echarts loading效果\r\n      this.myChart.showLoading({\r\n        text: 'loading',\r\n        color: '#c23531',\r\n        textColor: '#000',\r\n        maskColor: 'rgba(255, 255, 255, 0.2)',\r\n        zlevel: 0,\r\n      })\r\n      // 如果输入框中的内容等于上次搜索的内容，则直接返回\r\n      if (this.searchValidateForm.companyId == this.searchVFEcharts.companyId && this.searchValidateForm.spotId == this.searchVFEcharts.spotId && this.searchValidateForm.type == this.searchVFEcharts.type && this.searchValidateForm.status == this.searchVFEcharts.status && this.searchValidateForm.selectDateState == this.searchVFEcharts.selectDateState && startEndDateValidateFormList.toString() == startEndDateVFEchartsList.toString() && this.searchValidateForm.timeType == this.searchVFEcharts.timeType && this.searchValidateForm.totalTime == this.searchVFEcharts.totalTime && this.searchValidateForm.robotCode == this.searchVFEcharts.robotCode) {\r\n        // 隐藏echart的loadnig效果\r\n        this.myChart.hideLoading();\r\n        return\r\n      }\r\n\r\n      // 保存当前搜索的内容\r\n      this.searchVFEcharts.companyId = this.searchValidateForm.companyId\r\n      this.searchVFEcharts.spotId = this.searchValidateForm.spotId\r\n      this.searchVFEcharts.type = this.searchValidateForm.type\r\n      this.searchVFEcharts.status = this.searchValidateForm.status\r\n      this.searchVFEcharts.selectDateState = this.searchValidateForm.selectDateState\r\n      this.searchVFEcharts.startEndDate = this.searchValidateForm.startEndDate\r\n      this.searchVFEcharts.timeType = this.searchValidateForm.timeType\r\n      this.searchVFEcharts.totalTime = this.searchValidateForm.totalTime\r\n      this.searchVFEcharts.robotCode = this.searchValidateForm.robotCode\r\n\r\n      // 否则调用接口，请求数据，为tableData重新赋值\r\n      console.log(\"调用接口\");\r\n      await this.getTimeChart()\r\n      var res = await this.initEchartsData()\r\n      // console.log(res);\r\n      if (res.state == \"200\") {\r\n        this.tableFields = this.searchTableFields\r\n      }\r\n    },\r\n\r\n    /** 搜索表单中选项变化方法 start */\r\n    // 若先选择公司名称，则关联显示可选择的景区名称\r\n    async onChangeSearchCompany(companyId) {\r\n      // console.log(companyId);\r\n      var res = await this.getScenicList(companyId)\r\n      console.log(res);\r\n      var searchScenicOptions = res.data\r\n\r\n      this.searchScenicOptions = searchScenicOptions\r\n\r\n      // 如果返回的景区列表为空，则直接返回\r\n      if (searchScenicOptions.length == 0) {\r\n        // this.$message({\r\n        //   type: \"info\",\r\n        //   message: \"/system/robot_time_statistics/scenicList 接口返回的景区列表为空\"\r\n        // })\r\n        this.searchValidateForm.spotId = \"\"\r\n        return\r\n      }\r\n\r\n      var isHasScenic = false\r\n      searchScenicOptions.forEach((item) => {\r\n        if (item.SCENIC_SPOT_ID == this.searchValidateForm.spotId) {\r\n          isHasScenic = true\r\n          return\r\n        }\r\n      })\r\n\r\n      // 如果选择框内容不为空并且未选则景区，则为搜索景区选择框设置默认值\r\n      if (!!companyId && !isHasScenic) {\r\n        this.searchValidateForm.spotId = searchScenicOptions[0].SCENIC_SPOT_ID\r\n      }\r\n    },\r\n\r\n    // 景区选项变化时触发\r\n    async onChangeSearchSpot(spotId) {\r\n      var res = await this.getCompanyList(spotId)\r\n      // console.log(res.data);\r\n      var searchCompanyOptions = res.data\r\n\r\n      this.searchCompanyOptions = searchCompanyOptions\r\n\r\n      // 如果返回的公司列表为空，则直接返回\r\n      if (searchCompanyOptions.length == 0) {\r\n        // this.$message({\r\n        //   type: \"info\",\r\n        //   message: \"/system/robot_time_statistics/companyList 接口返回的公司列表为空\"\r\n        // })\r\n        this.searchValidateForm.companyId = \"\"\r\n        return\r\n      }\r\n\r\n      var isHasCompany = false\r\n      searchCompanyOptions.forEach((item) => {\r\n        if (item.COMPANY_ID == this.searchValidateForm.companyId) {\r\n          isHasCompany = true\r\n          return\r\n        }\r\n      })\r\n\r\n      // 如果选择框内容不为空并且未选则公司，则为搜索公司选择框设置默认值\r\n      if (!!spotId && !isHasCompany) {\r\n        this.searchValidateForm.companyId = searchCompanyOptions[0].COMPANY_ID\r\n      }\r\n    },\r\n\r\n    // 统计方式选项变化时触发\r\n    onChangeType(type) {\r\n      // console.log(type);\r\n\r\n      // 将对象转换成数组\r\n      var arr = []\r\n      for (let i in this.searchTableFields) {\r\n        let o = {};\r\n        o[i] = this.searchTableFields[i]; //即添加了key值也赋了value值 o[i] 相当于o.name 此时i为变量\r\n        arr.push(o)\r\n      }\r\n      if (type == \"1\") {\r\n        // 选择了按景区统计\r\n\r\n        // // 如果“机器人型号”或者“机器人编号”字段存在\r\n        // if (!!this.searchTableFields.hasOwnProperty(\"机器人型号\") || !!this.searchTableFields.hasOwnProperty(\"机器人编号\")) {\r\n        //   // 删除“机器人型号”和“机器人编号”字段\r\n        //   // 注意这里需要根据索引删除字段，所以倒着删就行了\r\n        //   for (var i = arr.length - 1; i > 0; i--) {\r\n        //     if (Object.values(arr[i])[0] == \"robotCode\" || Object.values(arr[i])[0] == \"机器人型号字段\") {\r\n        //       arr.splice(i, 1)\r\n        //     }\r\n        //   }\r\n        // }\r\n\r\n        // 如果“机器人编号”字段存在\r\n        if (!!this.searchTableFields.hasOwnProperty(\"机器人编号\")) {\r\n          // 删除“机器人型号”和“机器人编号”字段\r\n\r\n          // 注意这里需要根据索引删除字段，所以倒着删就行了\r\n          for (var i = arr.length - 1; i > 0; i--) {\r\n            if (Object.values(arr[i])[0] == \"robotCode\") {\r\n              arr.splice(i, 1)\r\n            }\r\n          }\r\n        }\r\n\r\n        // 启用统计报表、时长类型统计选择框\r\n        this.disabledStatGrossProfit = false\r\n        this.disabledTimeType = false\r\n\r\n        // 禁用机器人编号输入框\r\n        this.disabledRobotCode = true\r\n      } else if (type == \"2\") {\r\n        // 选择了按机器人统计\r\n\r\n        // // 如果“机器人型号”或者“机器人编号”字段不存在\r\n        // if (!this.searchTableFields.hasOwnProperty(\"机器人型号\") || !this.searchTableFields.hasOwnProperty(\"机器人编号\")) {\r\n        //   // 在arr中索引为 2 的位置插入对象\r\n        //   arr.splice(2, 0, { \"机器人型号\": \"机器人型号字段\" })\r\n        //   arr.splice(2, 0, { \"机器人编号\": \"robotCode\" })\r\n        // }\r\n\r\n        // 如果“机器人编号”字段不存在\r\n        if (!this.searchTableFields.hasOwnProperty(\"机器人编号\")) {\r\n          // 在arr中索引为 2 的位置插入对象\r\n          arr.splice(2, 0, { \"机器人编号\": \"robotCode\" })\r\n        }\r\n\r\n        // 禁用统计报表，将时长类型选择框选择运营时长并禁用\r\n        this.disabledStatGrossProfit = true\r\n        this.searchValidateForm.timeType = \"1\"\r\n\r\n        // 启用机器人编号输入框\r\n        this.disabledRobotCode = false\r\n\r\n        // 显示运营时长和平均运营时长两个字段\r\n\r\n        // 如果“运营时长/小时”字段不存在\r\n        if (!this.searchTableFields.hasOwnProperty(\"运营时长/小时\")) {\r\n          // 添加“运营时长/小时”字段\r\n          // 在索引为 2 的位置删除 0 个元素，添加新的对象元素\r\n          arr.splice(2, 0, { \"运营时长/小时\": \"totalTime\" })\r\n        }\r\n        this.disabledTimeType = true\r\n      }\r\n\r\n      // 将数组转换成对象\r\n      var result = {}\r\n      arr.forEach((item) => {\r\n        result[Object.keys(item)[0]] = Object.values(item)[0]\r\n      })\r\n      this.searchTableFields = result\r\n    },\r\n\r\n    // 时长类型选项变化时触发\r\n    onChangeTimeType(timeType) {\r\n      // console.log(timeType);\r\n\r\n      // 将对象转换成数组\r\n      var arr = []\r\n      for (let i in this.searchTableFields) {\r\n        let o = {};\r\n        o[i] = this.searchTableFields[i]; //即添加了key值也赋了value值 o[i] 相当于o.name 此时i为变量\r\n        arr.push(o)\r\n      }\r\n\r\n      if (timeType == \"1\") {\r\n        // 选择了运营时长\r\n        // 显示运营时长和平均运营时长两个字段\r\n\r\n        // 如果“运营时长/小时”字段不存在\r\n        if (!this.searchTableFields.hasOwnProperty(\"运营时长/小时\")) {\r\n          // 添加“运营时长/小时”字段\r\n          // 在索引为 2 的位置删除 0 个元素，添加新的对象元素\r\n          arr.splice(2, 0, { \"运营时长/小时\": \"totalTime\" })\r\n        }\r\n      } else if (timeType == \"2\") {\r\n        // 选择了平均运营时长\r\n        // 只显示平均运营时长\r\n\r\n        // 如果“运营时长/小时”字段存在\r\n        if (!!this.searchTableFields.hasOwnProperty(\"运营时长/小时\")) {\r\n          // 删除“运营时长/小时”字段\r\n          arr.forEach((item, index) => {\r\n            if (Object.values(item)[0] == \"totalTime\") {\r\n              arr.splice(index, 1)\r\n            }\r\n          })\r\n        }\r\n\r\n      }\r\n      // 将数组转换成对象\r\n      var result = {}\r\n      arr.forEach((item) => {\r\n        result[Object.keys(item)[0]] = Object.values(item)[0]\r\n      })\r\n      this.searchTableFields = result\r\n    },\r\n\r\n    /** 搜索表单中选项变化方法 end */\r\n\r\n    /** 提交表单中选项变化方法 start */\r\n    // 选择公司变化触发(通过name获取id并赋值给validateForm表单对象)\r\n    async onChangeCompany(spotName) {\r\n      // console.log(spotName);\r\n      let obj = {};\r\n      obj = this.companyOptions.find((item) => {  //这里的companyOptions就是上面遍历的数据源\r\n        return item.COMPANY_NAME === spotName;  //筛选出匹配数据，这里的COMPANY_NAME是你遍历数组每一项的label\r\n      });\r\n      var companyId = obj.COMPANY_ID;//  这里的COMPANY_ID就是对应value的\r\n      this.validateForm.companyId = companyId // 赋值给需要传给后台的表单验证对象\r\n\r\n      // var res = await this.getScenicList(companyId)\r\n      // var data = res.data\r\n      // // 数据处理\r\n      // var scenicOptions = data.map((item) => {\r\n      //   return {\r\n      //     SCENIC_SPOT_NAME: item.SPOT_NAME,\r\n      //     SCENIC_SPOT_ID: item.SPOT_ID\r\n      //   }\r\n      // })\r\n\r\n      // this.scenicOptions = scenicOptions\r\n    },\r\n\r\n    // 选择景区变化触发\r\n    async onChangeSpot(spotName) {\r\n      // console.log(spotName);\r\n      let obj = {};\r\n      obj = this.scenicOptions.find((item) => {  //这里的scenicOptions就是上面遍历的数据源\r\n        return item.SCENIC_SPOT_NAME === spotName;  //筛选出匹配数据，这里的SCENIC_SPOT_NAME是你遍历数组每一项的label\r\n      });\r\n      var spotId = obj.SCENIC_SPOT_ID;//  这里的SCENIC_SPOT_NAME就是对应value的\r\n      this.validateForm.spotId = spotId // 赋值给需要传给后台的表单验证对象\r\n\r\n      // var res = await this.getCompanyList(spotId)\r\n      // this.companyOptions = res.data\r\n    },\r\n\r\n    // 选择景区合作主体变化触发\r\n    onChangeSubject(checkDate) {\r\n      // console.log(checkDate);\r\n      let obj = {};\r\n      obj = this.subjectOptions.find((item) => {  //这里的scenicOptions就是上面遍历的数据源\r\n        return item.COMPANY_NAME === checkDate;  //筛选出匹配数据，这里的COMPANY_NAME是你遍历数组每一项的label\r\n      });\r\n      console.log(obj.COMPANY_ID);//  这里的COMPANY_ID就是对应value的\r\n      this.validateForm.subjectId = obj.COMPANY_ID // 赋值给需要传给后台的表单验证对象\r\n    },\r\n    /** 提交表单中选项变化方法 end */\r\n\r\n    // 重置\r\n    onReset() {\r\n      // 清空所有输入框内容\r\n      this.searchValidateForm.companyId = \"\"\r\n      this.searchValidateForm.spotId = \"\"\r\n      this.searchValidateForm.type = \"1\"\r\n      this.searchValidateForm.status = \"1\"\r\n      this.searchValidateForm.startEndDate = [\r\n        getYesterday(),\r\n        getYesterday()\r\n      ]\r\n      this.searchValidateForm.timeType = \"1\"\r\n      this.searchValidateForm.totalTime = \"\"\r\n      this.searchValidateForm.robotCode = \"\"\r\n\r\n      this.searchValidateForm.selectDateState = \"1\"\r\n      this.dateType = \"daterange\"\r\n\r\n      // 重新获取表格数据\r\n      this.getTableData()\r\n      this.getEchartsData()\r\n    },\r\n\r\n    // 统计报表(显示柱状图)\r\n    onStatGrossProfit(formName) {\r\n      this.$refs[formName].validate((valid) => {\r\n        if (valid) {\r\n\r\n          // console.log(this.searchValidateForm);\r\n          // echarts loading加载\r\n\r\n          // 当前选择的开始时间\r\n          var startDate = formatDateTime(this.searchValidateForm.startEndDate[0], this.searchValidateForm.selectDateState)\r\n          // 当前选择的结束时间\r\n          var endDate = formatDateTime(this.searchValidateForm.startEndDate[1], this.searchValidateForm.selectDateState)\r\n          // 当前时间\r\n          var currentDate = formatDateTime(new Date(), this.searchValidateForm.selectDateState)\r\n\r\n          // 当前是按日统计、按月统计还是按年统计\r\n          var type = \"\"\r\n          switch (this.searchValidateForm.selectDateState) {\r\n            case \"1\":\r\n              type = \"日\"\r\n              break;\r\n            case \"2\":\r\n              type = \"月\"\r\n              break;\r\n            case \"3\":\r\n              type = \"年\"\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n\r\n          // 如果开始时间等于当前时间或者结束时间等于当前时间\r\n          if (startDate == currentDate || endDate == currentDate) {\r\n            this.$confirm(`因当${type}未结束，统计当${type}的同比、环比数据不准确，是否继续?`, '提示', {\r\n              confirmButtonText: '确定',\r\n              cancelButtonText: '取消',\r\n              type: 'warning'\r\n            }).then(() => {\r\n              this.showTable = false\r\n              this.getEchartsData()\r\n            }).catch(() => {\r\n\r\n            });\r\n          } else {\r\n            this.showTable = false\r\n            this.getEchartsData()\r\n          }\r\n        } else {\r\n          console.log('error submit!!');\r\n          return false;\r\n        }\r\n      });\r\n\r\n    },\r\n\r\n    // 导出报表（导出柱状图）\r\n    onExportReport() {\r\n      this.$nextTick(() => {\r\n        var exportReportEle = document.getElementById(\"exportReport\")\r\n        exportReportEle.href = this.myChart.getDataURL()\r\n      })\r\n    },\r\n\r\n    // 点击查询数据按钮时触发\r\n    onSearch(formName) {\r\n      this.$refs[formName].validate((valid) => {\r\n        if (valid) {\r\n\r\n          // console.log(this.searchValidateForm);\r\n\r\n          // 当前选择的开始时间\r\n          var startDate = formatDateTime(this.searchValidateForm.startEndDate[0], this.searchValidateForm.selectDateState)\r\n          // 当前选择的结束时间\r\n          var endDate = formatDateTime(this.searchValidateForm.startEndDate[1], this.searchValidateForm.selectDateState)\r\n          // 当前时间\r\n          var currentDate = formatDateTime(new Date(), this.searchValidateForm.selectDateState)\r\n\r\n          // 当前是按日统计、按月统计还是按年统计\r\n          var type = \"\"\r\n          switch (this.searchValidateForm.selectDateState) {\r\n            case \"1\":\r\n              type = \"日\"\r\n              break;\r\n            case \"2\":\r\n              type = \"月\"\r\n              break;\r\n            case \"3\":\r\n              type = \"年\"\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n\r\n          // 如果开始时间等于当前时间或者结束时间等于当前时间\r\n          if (startDate == currentDate || endDate == currentDate) {\r\n            this.$confirm(`因当${type}未结束，统计当${type}的同比、环比数据不准确，是否继续?`, '提示', {\r\n              confirmButtonText: '确定',\r\n              cancelButtonText: '取消',\r\n              type: 'warning'\r\n            }).then(() => {\r\n              this.showTable = true\r\n              this.getTableData()\r\n            }).catch(() => {\r\n\r\n            });\r\n          } else {\r\n            this.showTable = true\r\n            this.getTableData()\r\n          }\r\n        } else {\r\n          console.log('error submit!!');\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n\r\n    // 导出Excel表格(点击导出数据按钮触发)\r\n    exportExcel() {\r\n      this.$confirm('确认导出Excel表格?', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(async () => {\r\n        this.downloadLoading = true\r\n\r\n        await this.getExportTableData()\r\n        // 使用nextTick当table表格渲染完成后执行导出表格操作\r\n        this.$nextTick(() => {\r\n          var xlsxParam = { raw: true } //转换成excel时，使用原始的格式\r\n          /* 从表生成工作簿对象 */\r\n          var wb = XLSX.utils.table_to_book(\r\n            document.querySelector('#outTable'),\r\n            xlsxParam\r\n          )\r\n          /* 获取二进制字符串作为输出 */\r\n          var wbout = XLSX.write(wb, {\r\n            bookType: 'xlsx',\r\n            bookSST: true,\r\n            type: 'array'\r\n          })\r\n          try {\r\n            FileSaver.saveAs(\r\n              //Blob 对象表示一个不可变、原始数据的类文件对象。\r\n              //Blob 表示的不一定是JavaScript原生格式的数据。\r\n              //File 接口基于Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。\r\n              //返回一个新创建的 Blob 对象，其内容由参数中给定的数组串联组成。\r\n              new Blob([wbout], {\r\n                type: 'application/octet-stream'\r\n              }),\r\n              //设置导出文件名称\r\n              \"按时间统计运营时长\" + '.xlsx'\r\n            )\r\n          } catch (e) {\r\n            if (typeof console !== 'undefined') console.log(e, wbout)\r\n          }\r\n          this.downloadLoading = false\r\n          return wbout\r\n        })\r\n\r\n        this.$message({\r\n          type: 'success',\r\n          message: '已成功导出Excel表格！',\r\n          offset: 100,\r\n          center: true,\r\n          duration: 1000,\r\n        });\r\n      }).catch(() => {\r\n        this.$message({\r\n          type: 'info',\r\n          message: '已取消导出Excel表格',\r\n          offset: 100,\r\n          center: true,\r\n          duration: 1000,\r\n        });\r\n      })\r\n\r\n    },\r\n\r\n    // 新增\r\n    onAdd() {\r\n      this.dialogVisible = true\r\n      this.dialogState = \"add\"\r\n    },\r\n\r\n    // 点击编辑时触发\r\n    editRow(index, row) {\r\n      console.log(index, row);\r\n      this.dialogVisible = true // 是否显示编辑dialog对话框\r\n\r\n      var rowObj = Object.assign({}, row) // 深拷贝row对象\r\n      this.validateForm = rowObj\r\n      this.dialogState = \"edit\"\r\n    },\r\n\r\n    // dialog取消\r\n    dialogClose() {\r\n      this.dialogVisible = false\r\n      this.$refs.validateForm.resetFields(); // 重置表单（清空无效）\r\n      this.getValidateForm() // 将validateForm对象中各个属性清空\r\n    },\r\n\r\n    // dialog 右上角关闭按钮\r\n    handleClose(done) {\r\n      done() // 关闭dialog对话框\r\n      this.$refs.validateForm.resetFields(); // 重置表单（清空无效）\r\n      this.getValidateForm() // 将validateForm对象中各个属性清空\r\n    },\r\n\r\n    // dialog提交\r\n    submitForm(formName) {\r\n      this.$refs[formName].validate((valid) => {\r\n        if (valid) {\r\n          console.log(this.validateForm);\r\n          if (this.dialogState == \"add\") {\r\n            // 新增公司信息\r\n            console.log(\"新增公司信息\");\r\n          } else if (this.dialogState == \"edit\") {\r\n            // 编辑公司信息\r\n            console.log(\"编辑公司信息\");\r\n          }\r\n          this.dialogVisible = false\r\n          this.$refs.validateForm.resetFields(); // 重置表单\r\n        } else {\r\n          console.log('error submit!!');\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n\r\n    /**\r\n     * 自定义合计行\r\n     */\r\n    getSummaries(param) {\r\n      const { columns, data } = param;\r\n      const sums = [];\r\n      columns.forEach((column, index) => {\r\n        if (index === 0) {\r\n          sums[index] = '合计';\r\n          return;\r\n        }\r\n        const values = data.map(item => Number(item[column.property]));\r\n        if (!values.every(value => isNaN(value))) {\r\n          sums[index] = values.reduce((prev, curr) => {\r\n            const value = Number(curr);\r\n            if (!isNaN(value)) {\r\n              return prev + curr;\r\n            } else {\r\n              return prev;\r\n            }\r\n          }, 0);\r\n          sums[index] = '';\r\n        } else {\r\n          // sums[index] = '';\r\n        }\r\n\r\n        // console.log(column);\r\n        if (column.property == \"totalTime\") {\r\n          sums[index] = this.typeTotalTime + \"小时\"\r\n        }\r\n      });\r\n\r\n      return sums;\r\n    },\r\n\r\n    // // currentPage 改变时会触发\r\n    // onCurrentChange(currentPage) {\r\n    //   this.currentPage = currentPage\r\n    //   this.initTableData(true)\r\n    // },\r\n\r\n    // // pageSize 改变时会触发\r\n    // onSizeChange(pageSize) {\r\n    //   // console.log(pageSize);\r\n    //   this.pageSize = pageSize\r\n    //   this.initTableData(true)\r\n    // },\r\n\r\n    // 无限滚动触发\r\n    load() {\r\n      this.loadTableData()\r\n    },\r\n  },\r\n  components: {\r\n    // DownloadExcel: JsonExcel,\r\n  },\r\n  computed: {\r\n    activeFixed() {\r\n      return (value) => {\r\n        // // 冻结左侧“合作主体、合作公司、收款单位、景区名称、月份”\r\n        // if (value == \"checkDate\" || value == \"spotName\" || value == \"payee\" || value == \"spotName\" || value == \"month\") {\r\n        //   return \"left\"\r\n        // }\r\n      }\r\n    },\r\n\r\n    tableContentValue() {\r\n      return (row, value) => {\r\n        var result = \"\"\r\n        // 如果当前列为“同比、环比”并且值不为空，则在数字后面加上百分号\r\n        if ((value == \"tb\" || value == \"hb\")) {\r\n          result = row[value] + \"%\"\r\n        } else {\r\n          result = row[value]\r\n        }\r\n        return result\r\n      }\r\n    },\r\n\r\n    sortable() {\r\n      return (value) => {\r\n        var result = \"\"\r\n        if (value == \"spotName\" || value == \"机器人型号字段\" || value == \"运营模式字段\") {\r\n          result = false\r\n        } else {\r\n          result = \"custom\"\r\n        }\r\n        return result\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.header {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n  flex-flow: row wrap;\r\n  background: #f2f2f2;\r\n  margin-bottom: 10px;\r\n  height: auto !important;\r\n  padding: 15px !important;\r\n}\r\n// .header > * {\r\n//   /**设置header下的所有子元素样式 */\r\n//   margin: 0 10px;\r\n//   display: flex;\r\n//   justify-content: center;\r\n//   align-items: center;\r\n// }\r\n\r\n.header .search-validate-form .el-form-item {\r\n  margin-bottom: 18px;\r\n  width: 150px;\r\n}\r\n\r\n.header .input-name {\r\n  width: 150px;\r\n}\r\n\r\n.header .el-form-item {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.el-header,\r\n.el-main {\r\n  padding: 0;\r\n}\r\n\r\n.el-dialog .el-dialog__body {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.real-income {\r\n  margin-right: 10px;\r\n}\r\n\r\n.my-echarts {\r\n  padding: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n#myChart {\r\n  width: 95vw;\r\n  height: 80vh;\r\n}\r\n\r\n#exportReport {\r\n  color: #ffffff;\r\n  text-decoration: none;\r\n  margin: 0 10px;\r\n}\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./RobotTimeStatisticsTime.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./RobotTimeStatisticsTime.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./RobotTimeStatisticsTime.vue?vue&type=template&id=0f1033f2&scoped=true&\"\nimport script from \"./RobotTimeStatisticsTime.vue?vue&type=script&lang=js&\"\nexport * from \"./RobotTimeStatisticsTime.vue?vue&type=script&lang=js&\"\nimport style0 from \"./RobotTimeStatisticsTime.vue?vue&type=style&index=0&id=0f1033f2&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"0f1033f2\",\n  null\n  \n)\n\nexport default component.exports","<template>\n  <div id=\"app\">\n    <robot-time-statistics-time></robot-time-statistics-time>\n  </div>\n</template>\n\n<script>\nimport RobotTimeStatisticsTime from \"./components/RobotTimeStatisticsTime.vue\"\nexport default {\n  name: 'App',\n  components: {\n    RobotTimeStatisticsTime\n  }\n}\n</script>\n\n<style lang=\"scss\">\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  // margin-top: 60px;\n}\n</style>\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=1dff8805&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n  },\n  mutations: {\n  },\n  actions: {\n  },\n  modules: {\n  }\n})\n","import Vue from \"vue\";\r\nimport {\r\n  Button,\r\n  Select,\r\n  Option,\r\n  Container,\r\n  Header,\r\n  Main,\r\n  Footer,\r\n  Input,\r\n  Table,\r\n  TableColumn,\r\n  Pagination,\r\n  Dialog,\r\n  Form,\r\n  FormItem,\r\n  Autocomplete,\r\n  Message,\r\n  MessageBox,\r\n  DatePicker,\r\n  Loading,\r\n} from \"element-ui\";\r\nVue.use(Button);\r\nVue.use(Select);\r\nVue.use(Option);\r\nVue.use(Container);\r\nVue.use(Header);\r\nVue.use(Main);\r\nVue.use(Footer);\r\nVue.use(Input);\r\nVue.use(Table);\r\nVue.use(TableColumn);\r\nVue.use(Pagination);\r\nVue.use(Dialog);\r\nVue.use(Form);\r\nVue.use(FormItem);\r\nVue.use(Autocomplete);\r\nVue.use(DatePicker);\r\nVue.use(Loading);\r\n\r\nVue.prototype.$message = Message;\r\nVue.prototype.$confirm = MessageBox.confirm;\r\n","import Vue from \"vue\";\r\nimport App from \"./App.vue\";\r\nimport store from \"./store\";\r\n\r\nimport \"./plugins/element.js\";\r\n\r\nimport elTableInfiniteScroll from \"el-table-infinite-scroll\";\r\n\r\nVue.use(elTableInfiniteScroll);\r\n\r\nVue.directive(\"loadmore\", {\r\n  bind(el, binding) {\r\n    const selectWrap = el.querySelector(\".el-table__body-wrapper\");\r\n    selectWrap.addEventListener(\"scroll\", function() {\r\n      let sign = 0;\r\n      const scrollDistance =\r\n        this.scrollHeight - this.scrollTop - this.clientHeight;\r\n      if (scrollDistance <= sign) {\r\n        binding.value();\r\n      }\r\n    });\r\n  },\r\n});\r\n\r\n// 导入 axios 库\r\nimport axios from \"axios\";\r\n// 配置请求的根路径\r\n// axios.defaults.baseURL = \"http://127.0.0.1:3000\";\r\naxios.defaults.withCredentials = true;\r\nVue.prototype.$http = axios;\r\n\r\nVue.config.productionTip = false;\r\n\r\n// 引入echarts\r\nimport * as echarts from \"echarts\";\r\nVue.prototype.$echarts = echarts;\r\n\r\n// 导入请求进度条组件和样式\r\nimport NProgress from 'nprogress'\r\nimport 'nprogress/nprogress.css'\r\n\r\n// axios 请求拦截器 发起请求就会触发\r\naxios.interceptors.request.use(config => {\r\n  // 发起请求则展示进度条\r\n  NProgress.start()\r\n  // 必须要返回config\r\n  return config;\r\n})\r\n// 请求有response后则触发\r\naxios.interceptors.response.use(config => {\r\n  // 请求结束则结束进度条\r\n  NProgress.done()\r\n  // 必须要返回config\r\n  return config\r\n})\r\n\r\nnew Vue({\r\n  store,\r\n  render: (h) => h(App),\r\n}).$mount(\"#app\");\r\n","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=scss&\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./RobotTimeStatisticsTime.vue?vue&type=style&index=0&id=0f1033f2&lang=scss&scoped=true&\""],"sourceRoot":""}